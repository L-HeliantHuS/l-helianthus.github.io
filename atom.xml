<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeliantHuS&#39;s Blog</title>
  
  <subtitle>Python/Go Devloper</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://l-helianthus.github.io/"/>
  <updated>2019-12-03T02:49:44.748Z</updated>
  <id>http://l-helianthus.github.io/</id>
  
  <author>
    <name>HeliantHuS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUUCTF 密码学思路WriteUP</title>
    <link href="http://l-helianthus.github.io/2019/12/03/8-BUUCTF-Crypto-WriteUP/"/>
    <id>http://l-helianthus.github.io/2019/12/03/8-BUUCTF-Crypto-WriteUP/</id>
    <published>2019-12-03T09:34:21.000Z</published>
    <updated>2019-12-03T02:49:44.748Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF, 自己学习的过程中思路记录, 以及flag…  (目的是记录自己的思路和想法！！！)</p><a id="more"></a><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>直接拿去<a href="https://www.somd5.com/" target="_blank" rel="noopener">SOMD5</a>解密<br><code>flag{admin1}</code></p><h3 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h3><p>ROT13解密, 直接<a href="http://ctf.ssleye.com/rot13.html" target="_blank" rel="noopener">在线工具</a>.<br><code>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</code></p><h3 id="Url编码"><a href="#Url编码" class="headerlink" title="Url编码"></a>Url编码</h3><p>用Hackbar之类的工具进行URL解码<br><code>flag{and 1=1}</code></p><h3 id="摩丝"><a href="#摩丝" class="headerlink" title="摩丝"></a>摩丝</h3><p>这可不是丝wa… 用工具直接解摩斯电码吧.<br>工具: <a href="http://ctf.ssleye.com/morse.html" target="_blank" rel="noopener">摩尔斯电码解密</a><br><code>flag{iloveyou}</code></p><h3 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h3><p>打开F12, 在Console中输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atob(<span class="string">"ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30="</span>)</span><br></pre></td></tr></table></figure><p><code>flag{THE_FLAG_OF_THIS_STRING}</code></p><h3 id="变异摩斯"><a href="#变异摩斯" class="headerlink" title="变异摩斯"></a>变异摩斯</h3><p>没思路先写脚本穷举, 发现从ascii+5开始依次出现flag关键字, 于是写脚本进行解密.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">"afZ_r9VYfScOeO_UL^RWUc"</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">5</span>, len(cipher) + <span class="number">5</span>):</span><br><span class="line">    temp = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">        temp += chr(ord(i) + num)</span><br><span class="line"></span><br><span class="line">    print(temp[index], end=<span class="string">""</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>flag{Caesar_variation}</code></p><h3 id="Quoted-printable"><a href="#Quoted-printable" class="headerlink" title="Quoted-printable"></a>Quoted-printable</h3><p>工具题，没意义，也没难度，知道有这种编码就会解.<br><a href="http://ctf.ssleye.com/quoted.html" target="_blank" rel="noopener">在线工具</a><br><code>flag{那你也很棒哦}</code></p><h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>社工题目, 之前做过类似的, 知道规律就行, 没什么难度.  (别问为什么, 这就是CTF)<br><code>flag{zs19900315}</code></p><h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h3><p>感觉不应该是密码学, 应该是Misc题目.<br>使用WinHex把压缩包打开, 将Hex的, <code>50 4B 03 04 14 00 09 00</code>改成<code>50 4B 03 04 14 00 00 00</code>, 保存再去解压, 就会发现可以正常解压了.<br><code>flag{Adm1N-B2G-kU-SZIP}</code></p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>稍微了解一下RSA加密算法就知道d怎么求了, 直接上py脚本.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p = <span class="number">473398607161</span></span><br><span class="line">q = <span class="number">4511491</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">print(libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)))</span><br></pre></td></tr></table></figure><p><code>flag{125631357777427553}</code></p><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h3><p>看题目就知道是什么加密, 直接找<a href="http://tool.chinaz.com/Tools/TextEncrypt.aspx" target="_blank" rel="noopener">在线工具</a>.<br><code>flag{Cute_Rabbit}</code></p><h3 id="丢失的MD5"><a href="#丢失的MD5" class="headerlink" title="丢失的MD5"></a>丢失的MD5</h3><p>给了一个Python脚本, 脚本是Python2的, 直接运行得到Flag. (目的是了解MD5爆破)<br><code>flag{e9032994dabac08080091151380478a2}</code></p><h3 id="篱笆墙的影子"><a href="#篱笆墙的影子" class="headerlink" title="篱笆墙的影子"></a>篱笆墙的影子</h3><p>栅栏密码, 选择2栏, 进行<strong>加密</strong>操作, flag直接出.  (注意是加密, 不是解密)<br><code>flag{wethinkwehavetheflag}</code></p><h3 id="Alice与Bob"><a href="#Alice与Bob" class="headerlink" title="Alice与Bob"></a>Alice与Bob</h3><p>通过<a href="http://factordb.com/index.php?query=98554799767" target="_blank" rel="noopener">在线工具</a>进行质因数分解, 得到两个素数, 根据题目, 将小素数放在前面, 大素数放在后面, 拼接, 进行md5 32位的加密.<br><code>flag{d450209323a847c8d01c6be47c81811a}</code></p><h3 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h3><p>需要了解RSA的加密过程, 才会知道解密过程, 背脚本是没有意义的。<br>建议去看看RSA原理, 推荐几个我看过的教程.<br><a href="https://www.youtube.com/watch?v=TqX0AHHwRYQ" target="_blank" rel="noopener">RSA-1</a><br><a href="https://www.youtube.com/watch?v=AS0fYRnotEo" target="_blank" rel="noopener">RSA-2</a></p><p>看完上面两个绝对会RSA基础题目解密了.<br>上Python脚本!!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p =  <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q =  <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c =  <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">result = pow(c, d, p*q)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><code>flag{5577446633554466577768879988}</code></p><h3 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h3><p>？这什么沙雕题目，如果看不懂<code>辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳</code>， <code>+甲子</code>就GG.<br>得出: <code>XZSDMFLZ</code><br>然后进行古典密码解密, 先<code>4栏栅栏</code>, 再<code>偏移21位凯撒</code>, 即可得出FLag<br><code>flag{SHUANGYU}</code></p><h3 id="大帝的密码武器"><a href="#大帝的密码武器" class="headerlink" title="大帝的密码武器"></a>大帝的密码武器</h3><p>说实话, 这个题目一开始我没怎么看明白, 后来找到规律就好办了.<br>先将<code>FRPHEVGL</code>进行ASCII爆破, 看题目说会出现有意义的单词, 就每次爆破的时候, ASCII大于’z’的时候， 将当前字母的ASCII码进行<code>-26</code>操作, 爆破发现<code>13</code>是有意义<code>SECUR</code>的, 直接上脚本.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">"FRPHEVGL"</span>  <span class="comment"># 已知的密文</span></span><br><span class="line">result = <span class="string">"SECURITY"</span>  <span class="comment"># 第一步找到的有意义单词</span></span><br><span class="line">secert = <span class="number">13</span>          <span class="comment"># 第二步找到的有意义偏移量</span></span><br><span class="line">t = <span class="string">"ComeChina"</span>      <span class="comment"># 需要解密的密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 爆破具体是位移多少位才是有意义的.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> cipher:</span><br><span class="line">        temp = ord(j) + i</span><br><span class="line">        <span class="keyword">if</span> temp &gt; ord(<span class="string">"Z"</span>):</span><br><span class="line">            temp -= <span class="number">26</span></span><br><span class="line">        print(chr(temp), end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 找规律, 发现都是根据13来的.</span></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> zip(cipher, result):</span><br><span class="line">    i = ord(i)</span><br><span class="line">    j = ord(j)</span><br><span class="line">    <span class="keyword">if</span> i &gt; j:</span><br><span class="line">        temp.append(j - i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp.append(j - i)</span><br><span class="line">print(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 根据题目规律爆破, 超过z就-26, 即可得到Flag</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    t = ord(i) + secert</span><br><span class="line">    <span class="keyword">if</span> t &gt; ord(<span class="string">"z"</span>):</span><br><span class="line">        t -= <span class="number">26</span></span><br><span class="line">    print(chr(t), end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p><code>flag{PbzrPuvan}</code></p><hr><p>先到这里吧.  以后慢慢补充.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BUUCTF, 自己学习的过程中思路记录, 以及flag…  (目的是记录自己的思路和想法！！！)&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://l-helianthus.github.io/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://l-helianthus.github.io/tags/CTF/"/>
    
      <category term="BUUCTF" scheme="http://l-helianthus.github.io/tags/BUUCTF/"/>
    
      <category term="Crypto" scheme="http://l-helianthus.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>手算正反十进制转换二进制过程</title>
    <link href="http://l-helianthus.github.io/2019/10/28/7-Dec-to-Bin-Calc/"/>
    <id>http://l-helianthus.github.io/2019/10/28/7-Dec-to-Bin-Calc/</id>
    <published>2019-10-27T19:57:06.000Z</published>
    <updated>2019-10-27T12:35:49.122Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下手算十进制到二进制, 包括正数和负数转换二进制.</p><a id="more"></a><h2 id="十进制正数-转换-二进制"><a href="#十进制正数-转换-二进制" class="headerlink" title="十进制正数 转换 二进制"></a>十进制正数 转换 二进制</h2><ol><li>除以2的整数结果除以2到0为止.</li><li>结果从下往上看.</li></ol><ul><li><p>Example: 把9计算成2进制.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">9/2  = 4 -&gt; 1  ; 9/2=4.5 把小数点忽略, 就是4, 因为有小数点, 所以这个位置就是1.</span><br><span class="line">4/2  = 2 -&gt; 0  ; 4/2=2 没有小数点, 这个位置就是0.</span><br><span class="line">2/2  = 1 -&gt; 0  ; 结果等于1的时候还要进行除.</span><br><span class="line">1/2  = 0 -&gt; 1  ; 结果为0的时候才能结束, 1/2=0.5, 有余数, 所以为1.</span><br><span class="line">从下向上看, 排序1001, 这个计算的结果从上到下和从下到上都一样...</span><br></pre></td></tr></table></figure></li><li><p>Example: 把27计算2进制.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">27</span><br><span class="line">27/2 = 13 -&gt; 1</span><br><span class="line">13/2 = 6  -&gt; 1</span><br><span class="line">6/2  = 3  -&gt; 0</span><br><span class="line">3/2  = 1  -&gt; 1</span><br><span class="line">1/2  = 0  -&gt; 1</span><br><span class="line">结果是: 0001 1011</span><br></pre></td></tr></table></figure></li></ul><h2 id="十进制负数-转换-二进制"><a href="#十进制负数-转换-二进制" class="headerlink" title="十进制负数 转换 二进制"></a>十进制负数 转换 二进制</h2><ol><li>计算负数<code>绝对值</code>的二进制结果.</li><li>将第一步计算的结果进行取反.</li><li>取反后+1, 就是最终结果</li><li>64位的, 计算的内容前面填充1.</li></ol><ul><li><p>Example: 把-9转换二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">9/2 4 1</span><br><span class="line">4/2 2 0</span><br><span class="line">2/2 1 0</span><br><span class="line">1/2 0 1</span><br><span class="line"></span><br><span class="line">源码: 1001</span><br><span class="line">反码: 0110</span><br><span class="line">补码: 反码 + 1 : 0111</span><br><span class="line"></span><br><span class="line">结果: 0111</span><br></pre></td></tr></table></figure></li><li><p>Example: 把-15转换二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">15</span><br><span class="line">15/2 7 1</span><br><span class="line">7/2  3 1</span><br><span class="line">3/2  1 1</span><br><span class="line">1/2  0 1</span><br><span class="line"></span><br><span class="line">源码: 1111</span><br><span class="line">反码: 0000</span><br><span class="line">补码: 0001</span><br><span class="line"></span><br><span class="line">结果: 0001</span><br></pre></td></tr></table></figure></li></ul><hr><p>其他数计算都是这个步骤, 去尝试一下吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习一下手算十进制到二进制, 包括正数和负数转换二进制.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://l-helianthus.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="进制转换" scheme="http://l-helianthus.github.io/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="二进制" scheme="http://l-helianthus.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Nim编程语言快速入门 (附代码例子)</title>
    <link href="http://l-helianthus.github.io/2019/10/03/6-Nim-Programming-Language/"/>
    <id>http://l-helianthus.github.io/2019/10/03/6-Nim-Programming-Language/</id>
    <published>2019-10-03T13:12:29.000Z</published>
    <updated>2019-10-04T05:02:53.011Z</updated>
    
    <content type="html"><![CDATA[<p>Nim是一种静态类型编译的系统编程语言, 它结合了其他成熟语言的成功概念, 这次就带你5分钟学会Nim的编写, 来跟我一起尝试一下吧.</p><a id="more"></a><p>Nim官网: <a href="https://Nim-lang.org/" target="_blank" rel="noopener">https://Nim-lang.org/</a><br>Nim中文社区: <a href="https://Nim-lang-cn.org/" target="_blank" rel="noopener">https://Nim-lang-cn.org/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>花了半小时的时间去试了试这门语言, 可以通过Nim生成js或者c的代码以及可执行文件, 感觉蛮酷的, 做个分享.</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Nim编译出一个exe文件是这么做的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nim c main.Nim</span><br></pre></td></tr></table></figure><p>Nim 编译出一个js文件是这么做的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nim js main.Nim</span><br></pre></td></tr></table></figure><p>发没发现? 只需要更改Nim <type> 中的内容就可以了.</type></p><p>不过, 你无法编译成”世界上最好的语言”, 比如<code>Nim php main.Nim</code>, 会报错的！！</p><h2 id="超级详细带代码体验"><a href="#超级详细带代码体验" class="headerlink" title="超级详细带代码体验"></a>超级详细带代码体验</h2><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><h5 id="基本变量类型"><a href="#基本变量类型" class="headerlink" title="基本变量类型"></a>基本变量类型</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定类型</span></span><br><span class="line"><span class="keyword">var</span> name: <span class="built_in">string</span> = <span class="string">"HelloWorld"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型推断</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span></span><br></pre></td></tr></table></figure><h5 id="列表-数组"><a href="#列表-数组" class="headerlink" title="列表(数组)"></a>列表(数组)</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = @[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>加上<code>@</code>符号表明是动态数组, 可以进行<code>Add</code>和<code>POP</code>操作.</p><h5 id="Table-在Py叫Dict-Go叫Map"><a href="#Table-在Py叫Dict-Go叫Map" class="headerlink" title="Table(在Py叫Dict, Go叫Map)"></a>Table(在Py叫Dict, Go叫Map)</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tables</span><br><span class="line"><span class="keyword">var</span> dict = &#123;<span class="string">"one"</span>: <span class="string">"HeliantHuS"</span>&#125;.toTable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取值</span></span><br><span class="line">echo dict[<span class="string">"one"</span>]  <span class="comment"># HeliantHuS</span></span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印HelloWorld</span></span><br><span class="line">echo <span class="string">"HelloWorld"</span></span><br></pre></td></tr></table></figure><p>Nim中的注释和Python一样.</p><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><h5 id="case-of"><a href="#case-of" class="headerlink" title="case-of"></a>case-of</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="built_in">string</span> = readLine(<span class="literal">stdin</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># case就等于其他语言的switch, of就相当于case</span></span><br><span class="line"><span class="keyword">case</span> name</span><br><span class="line"><span class="keyword">of</span> <span class="string">""</span>:</span><br><span class="line">    echo <span class="string">"你不可以输入空的哦."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">of</span> <span class="string">"HeliantHuS"</span>:</span><br><span class="line">    echo <span class="string">"HeliantHuS is Handsome"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    echo <span class="string">"我没看懂你输入的是什么"</span></span><br></pre></td></tr></table></figure><h5 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> strformat</span><br><span class="line"><span class="keyword">var</span> name: <span class="built_in">string</span> = readLine(<span class="literal">stdin</span>)</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"HeliantHuS"</span>:</span><br><span class="line">    echo <span class="string">fmt"Hello, &#123;name&#125;"</span></span><br><span class="line"><span class="keyword">elif</span> name == <span class="string">"exit"</span>:</span><br><span class="line">    echo <span class="string">"Exit!!!"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    echo <span class="string">"没有匹配~"</span></span><br></pre></td></tr></table></figure><p><img src="/images/6/strfmt.jpg" alt></p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><p>while 没什么好说的, Python有的它也有.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while true:</span><br><span class="line">    echo &quot;Hello&quot;</span><br></pre></td></tr></table></figure><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> countup(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    echo i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>:</span><br><span class="line">    echo i</span><br></pre></td></tr></table></figure><p>上面两段代码效果一样, 可以看出来比Python还要简洁.</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> strformat</span><br><span class="line"><span class="keyword">proc</span> hello(name: <span class="built_in">string</span>): <span class="built_in">string</span> =</span><br><span class="line">    <span class="keyword">return</span> <span class="string">fmt"Hello, &#123;name&#125;"</span></span><br></pre></td></tr></table></figure><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = hello(<span class="string">"HeliantHuS"</span>)</span><br><span class="line">echo <span class="literal">result</span></span><br></pre></td></tr></table></figure><h5 id="舍弃函数返回值"><a href="#舍弃函数返回值" class="headerlink" title="舍弃函数返回值"></a>舍弃函数返回值</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">discard</span> hello(<span class="string">"HeliantHuS"</span>)</span><br></pre></td></tr></table></figure><p>在Nim中, 函数必须要有返回值, 你就必须要去用变量去接收或者直接echo, 不然会报错, 有时候函数的返回值也许不重要, 就需要去舍弃, 就要用关键字<code>discard</code>去舍弃.</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h5 id="block"><a href="#block" class="headerlink" title="block"></a>block</h5><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">block</span> hello:</span><br><span class="line">    echo <span class="string">"HelloWorld"</span></span><br></pre></td></tr></table></figure><p>Nim中也是使用缩进进行作用域的区分.</p><blockquote><p>道理我都懂, 可我好像真的对你着迷.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nim是一种静态类型编译的系统编程语言, 它结合了其他成熟语言的成功概念, 这次就带你5分钟学会Nim的编写, 来跟我一起尝试一下吧.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nim" scheme="http://l-helianthus.github.io/categories/Nim/"/>
    
    
      <category term="Nim" scheme="http://l-helianthus.github.io/tags/Nim/"/>
    
      <category term="元编程" scheme="http://l-helianthus.github.io/tags/%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理骚操作详解</title>
    <link href="http://l-helianthus.github.io/2019/10/03/5-Nginx-Config-ServerName/"/>
    <id>http://l-helianthus.github.io/2019/10/03/5-Nginx-Config-ServerName/</id>
    <published>2019-10-02T22:37:31.000Z</published>
    <updated>2019-10-08T03:27:15.398Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是一个的静态文件和反向代理服务，轻量，方便部署，而且性能极高.<br>看完这篇文章, 你将点亮NGINX配置<code>虚拟主机</code>, <code>反向代理</code>等技能点.</p><a id="more"></a><h2 id="深入浅出"><a href="#深入浅出" class="headerlink" title="深入浅出"></a>深入浅出</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这是一个<code>nginx</code>最基本的配置, 分<code>http</code>代码块, <code>server</code>代码块, 其中今天要玩的就是<code>server</code>这个代码块.</p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>首先在<code>nginx</code>的静态文件夹保证有两个<code>html文件</code>, 分别为<code>index.html</code>、<code>page1.html</code>, 里面的内容自己随便写, 只要能分清楚是哪个文件就好.</p><h4 id="正常启动"><a href="#正常启动" class="headerlink" title="正常启动"></a>正常启动</h4><p>正常启动Nginx, 访问通过服务器地址访问, 会访问到<code>index.html</code>的内容.<br><img src="/images/5/indexpage.jpg" alt></p><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>第一个server代码块不需要更改, 下面紧接着添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name page1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index page1.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样, 只要访问这个服务器的时候，请求头的<code>Host</code>键内容为<code>page1.com</code>, 可以通过抓包或者修改<code>hosts</code>文件的方式来达到目的.<br><img src="/images/5/page1.jpg" alt></p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>第二个server代码块不需要更改, 修改第一个server代码块的内容为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://hls.easy.echosite.cn/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务器, 访问<code>localhost</code>或者服务器真实IP, 你会发现, 显示的结果是你输入的<code>http://hls.easy.echosite.cn</code>的内容, 但是浏览器的URL依旧是<code>localhost</code>或服务器IP.<br><img src="/images/5/proxy.jpg" alt></p><h4 id="防盗链配置"><a href="#防盗链配置" class="headerlink" title="防盗链配置"></a>防盗链配置</h4><p>原理: 通过nginx的if判断, 只允许通过合法的域名访问本网站, 其余的域名访问本网站的时候直接返回403。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name youdoamin.com;</span><br><span class="line">    if ($host !~* ^youdomain.com$)</span><br><span class="line">    &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>临了, 最后的配置文件样子:<br><img src="/images/5/conf.jpg" alt></p><p>其实Nginx还有很多脚本类的东西, 太过深入就需要自己去研究了, NGINX一般还是作为接入层的反向代理去使用, 配置方便, 也轻量, 真的是做WEB必备的反向代理服务.</p><p>最后~ 文章中演示的<code>hls.easy.echosite.cn</code>是使用<a href="https://www.echosite.cn" target="_blank" rel="noopener">EchoSite2.0 内网穿透，就选他了！</a>所内网穿透用来测试的, 如果有需要内网穿透的可以了解一下.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx是一个的静态文件和反向代理服务，轻量，方便部署，而且性能极高.&lt;br&gt;看完这篇文章, 你将点亮NGINX配置&lt;code&gt;虚拟主机&lt;/code&gt;, &lt;code&gt;反向代理&lt;/code&gt;等技能点.&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://l-helianthus.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="http://l-helianthus.github.io/tags/Nginx/"/>
    
      <category term="HTTP" scheme="http://l-helianthus.github.io/tags/HTTP/"/>
    
      <category term="Proxy" scheme="http://l-helianthus.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Fabric Python远程部署利器</title>
    <link href="http://l-helianthus.github.io/2019/10/01/4-Fabric-Python-Remote-deploy/"/>
    <id>http://l-helianthus.github.io/2019/10/01/4-Fabric-Python-Remote-deploy/</id>
    <published>2019-09-30T18:00:51.000Z</published>
    <updated>2019-09-30T10:58:14.320Z</updated>
    
    <content type="html"><![CDATA[<p>Fabric是一个Python的第三方库，可以进行Linux的远程部署，批量执行各种命令，况且，机器出错的次数比你少多了呢。<br>(附详细的SSH免密登录过程)</p><a id="more"></a><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ul><li>Windows10的WSL IP: <code>192.168.1.66</code> 下面简称<code>物理机</code>.</li><li>VMware Centos服务器 IP: <code>192.168.1.40</code> 下面简称<code>服务器</code>.</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>Python3</li><li>类Linux操作系统 | 没有Linux用Windows的WSL也可以.</li></ul><h2 id="技术难点"><a href="#技术难点" class="headerlink" title="技术难点"></a>技术难点</h2><ul><li>SSH免密登录.</li></ul><h2 id="深入浅出"><a href="#深入浅出" class="headerlink" title="深入浅出"></a>深入浅出</h2><h4 id="SSH免密"><a href="#SSH免密" class="headerlink" title="SSH免密"></a>SSH免密</h4><p>使用<code>ssh-keygen</code>命令在物理机生成公钥和私钥, 生成完毕后在当前登录的用户目录下<code>.ssh</code>文件夹下.<br><img src="/images/4/ssh-keygen.jpg" alt></p><p>在服务器中的<code>.ssh</code>文件夹下创建一个名为<code>authorized_keys</code>文件并设置权限为<code>600</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">touch authorized_keys</span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure><p>将物理机的<code>id_rsa.pub</code>里面的内容复制进服务器新建的<code>authorized_keys</code>中.<br>可以使用<code>scp</code>命令，将<code>id_rsa.pub</code>文件发送到服务器中，然后使用<code>cat</code>命令将<code>id_rsa.pub</code>的内容追加到<code>authorized_keys</code>文件中.<br>物理机:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@192.168.1.40:~/.ssh/</span><br></pre></td></tr></table></figure><p>服务器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p><img src="/images/4/scp.jpg" alt><br><img src="/images/4/cat.jpg" alt></p><p>使用物理机远程SSH连接服务器验证是否免密成功<br><img src="/images/4/ssh.jpg" alt></p><h4 id="安装Fabric"><a href="#安装Fabric" class="headerlink" title="安装Fabric"></a>安装Fabric</h4><p>在物理机执行下面的安装命令即可安装完毕.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install fabric</span><br></pre></td></tr></table></figure><p>找一个空的目录新建名为<code>fabfile.py</code>的文件.<br><img src="/images/4/touch.jpg" alt></p><h4 id="编写Fabric脚本"><a href="#编写Fabric脚本" class="headerlink" title="编写Fabric脚本"></a>编写Fabric脚本</h4><p>使用<code>vim</code>编辑刚刚新建的py文件.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> Connection, task</span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">devploy</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> Connection(<span class="string">"root@192.168.1.40"</span>) <span class="keyword">as</span> c:</span><br><span class="line">        c.run(<span class="string">"ifconfig"</span>)</span><br></pre></td></tr></table></figure><p>写入完毕后保存，运行<code>fab deploy</code>即可看到服务器的执行回显.<br><img src="/images/4/fab.jpg" alt></p><p>可以用来一键替换更新yum源, 代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> Connection, task</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> Connection(<span class="string">"root@192.168.1.40"</span>) <span class="keyword">as</span> c:</span><br><span class="line">        c.run(<span class="string">'cd /etc/yum.repos.d/ &amp;&amp; \</span></span><br><span class="line"><span class="string">            mv CentOS-Media.repo CentOS-Media.repo.backup &amp;&amp; \</span></span><br><span class="line"><span class="string">            wget http://mirrors.163.com/.help/CentOS7-Base-163.repo &amp;&amp; \</span></span><br><span class="line"><span class="string">            yum clean all &amp;&amp; \</span></span><br><span class="line"><span class="string">            yum makecache &amp;&amp; \</span></span><br><span class="line"><span class="string">            yum update'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/4/yum.jpg" alt></p><p>不是不愿意学习新的东西, 而是想知道学习这个能做什么, 加油.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Fabric是一个Python的第三方库，可以进行Linux的远程部署，批量执行各种命令，况且，机器出错的次数比你少多了呢。&lt;br&gt;(附详细的SSH免密登录过程)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://l-helianthus.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://l-helianthus.github.io/tags/Python/"/>
    
      <category term="fabric" scheme="http://l-helianthus.github.io/tags/fabric/"/>
    
      <category term="远程部署" scheme="http://l-helianthus.github.io/tags/%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nessus系统漏洞扫描平台(VMware傻瓜式安装)</title>
    <link href="http://l-helianthus.github.io/2019/09/30/3-Nessus-Install-or-Use-and-License/"/>
    <id>http://l-helianthus.github.io/2019/09/30/3-Nessus-Install-or-Use-and-License/</id>
    <published>2019-09-29T21:44:44.000Z</published>
    <updated>2019-09-29T14:20:42.342Z</updated>
    
    <content type="html"><![CDATA[<p>最懊恼的就是安装这种软件了，免费版本只能扫描16个IP，收费版本在天朝没人会去买，买完也没人去分享，而现在，我来安利一波可以无限IP，而且还傻瓜式的Nessus安装方式.</p><a id="more"></a><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol><li>VMware Workstation (Version &gt;= 12)</li><li>科学上网工具</li><li>眼睛和脑子</li></ol><h2 id="下载Nessus-VMware版"><a href="#下载Nessus-VMware版" class="headerlink" title="下载Nessus(VMware版)"></a>下载Nessus(VMware版)</h2><p><a href="https://mega.nz/#!0YkSDYpY!JndpKpH5yB3hDNV-091jOwPhW9rLK9iNSzuF9nTz-i0" target="_blank" rel="noopener">https://mega.nz/#!0YkSDYpY!JndpKpH5yB3hDNV-091jOwPhW9rLK9iNSzuF9nTz-i0</a></p><h2 id="部署Nessus"><a href="#部署Nessus" class="headerlink" title="部署Nessus"></a>部署Nessus</h2><h4 id="导入至VMware"><a href="#导入至VMware" class="headerlink" title="导入至VMware"></a>导入至VMware</h4><p>首先解压下载的压缩文件，放到你能记得住的地方</p><p>然后打开<code>vmware</code>, <code>File -&gt; Open</code>, 选择<code>Nessus 8_VM12.ovf</code>文件.</p><p><img src="/images/3/vmware1.jpg" alt><br><img src="/images/3/vmware2.jpg" alt></p><h4 id="开机运行-配置网卡"><a href="#开机运行-配置网卡" class="headerlink" title="开机运行 配置网卡"></a>开机运行 配置网卡</h4><p>默认的用户名和密码都在描述中写了, 按照描述进行操作绝对没问题的.<br><img src="/images/3/description.jpg" alt></p><p>开机你肯定没问题了，按照他的要求访问<code>https://1.1.2.1:8834</code>你肯定访问不了，你需要修改网卡配置</p><p>这样，将网卡2改成NAT<br><img src="/images/3/setting.jpg" alt></p><p>就可以自动获取IP地址, 获取完毕直接输入<code>ifconfig</code>查看自动获取的IP地址, 访问自动获取的IP地址加端口号…哦对了, 一定要是<code>https</code>, 比如我自动获取的IP地址为<code>192.168.23.134</code>, 那么我在我物理机访问<code>https://192.168.23.134:8834</code>就可以了.<br><img src="/images/3/nessus.jpg" alt></p><p>到这里就完全可以正常运行以及进行扫描了, 怎么运行扫描就要看你了, 赶紧继续学习吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最懊恼的就是安装这种软件了，免费版本只能扫描16个IP，收费版本在天朝没人会去买，买完也没人去分享，而现在，我来安利一波可以无限IP，而且还傻瓜式的Nessus安装方式.&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络安全" scheme="http://l-helianthus.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="http://l-helianthus.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="扫描" scheme="http://l-helianthus.github.io/tags/%E6%89%AB%E6%8F%8F/"/>
    
      <category term="漏洞" scheme="http://l-helianthus.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Paramiko Python远程连接工具</title>
    <link href="http://l-helianthus.github.io/2019/09/29/2-paramiko-remote-exec/"/>
    <id>http://l-helianthus.github.io/2019/09/29/2-paramiko-remote-exec/</id>
    <published>2019-09-28T22:38:02.000Z</published>
    <updated>2019-09-30T10:53:44.936Z</updated>
    
    <content type="html"><![CDATA[<p>Paramiko是一个Python的远程操作库，可以进行<code>SSH</code>, <code>SFTP</code>等远程连接操作. 来学习学习怎么使用吧</p><a id="more"></a><h1 id="安装Paramiko"><a href="#安装Paramiko" class="headerlink" title="安装Paramiko"></a>安装Paramiko</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install paramiko</span><br></pre></td></tr></table></figure><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h3 id="导入paramiko"><a href="#导入paramiko" class="headerlink" title="导入paramiko"></a>导入paramiko</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br></pre></td></tr></table></figure><h3 id="初始化SSHClient"><a href="#初始化SSHClient" class="headerlink" title="初始化SSHClient"></a>初始化SSHClient</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client = paramiko.SSHClient()</span><br><span class="line">client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br></pre></td></tr></table></figure><h3 id="连接主机"><a href="#连接主机" class="headerlink" title="连接主机"></a>连接主机</h3><p>我的<code>Linux</code>主机是<code>192.168.1.40</code>，用户名为<code>root</code>, 密码为<code>admin123.</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.connect(hostname=<span class="string">"192.168.1.40"</span>, username=<span class="string">"root"</span>, password=<span class="string">"admin123."</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/2/warning.jpg" alt="warning"><br>连接上会有几条警告，可以无视掉，或者直接<a href="https://github.com/paramiko/paramiko/issues/1386#issuecomment-470847772" target="_blank" rel="noopener">屏蔽警告信息</a></p><h3 id="发送命令"><a href="#发送命令" class="headerlink" title="发送命令"></a>发送命令</h3><p>执行一个<code>ifconfig</code>命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stdin, stdout, stderr = client.exec_command(<span class="string">"ifconfig"</span>)</span><br></pre></td></tr></table></figure><p>注意这里, <code>exec_command</code>的返回值为tuple类型<br>可以通过<code>python3 -m pydoc paramiko.SSHClient.exec_command</code>查看源码.<br><img src="/images/2/pydoc.jpg" alt="PyDoc"></p><h3 id="查看命令返回值"><a href="#查看命令返回值" class="headerlink" title="查看命令返回值"></a>查看命令返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stdout.readlines():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><img src="/images/2/ifconfig.jpg" alt="ifconfig"><br>这样就得到了返回值</p><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>不要总是依赖上下文, 要学会手动释放资源关闭连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.close()</span><br></pre></td></tr></table></figure><p>到这里, <code>paramiko</code>的<code>SSHClient</code>用法就结束了，<code>paramiko</code>还支持<code>SFTPClient</code>等其他远程操作, 自己发掘吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paramiko是一个Python的远程操作库，可以进行&lt;code&gt;SSH&lt;/code&gt;, &lt;code&gt;SFTP&lt;/code&gt;等远程连接操作. 来学习学习怎么使用吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://l-helianthus.github.io/categories/Python/"/>
    
    
      <category term="paramiko" scheme="http://l-helianthus.github.io/tags/paramiko/"/>
    
      <category term="python" scheme="http://l-helianthus.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Simple Reverse (简单的逆向)</title>
    <link href="http://l-helianthus.github.io/2019/09/28/1-Simple-Reverse/"/>
    <id>http://l-helianthus.github.io/2019/09/28/1-Simple-Reverse/</id>
    <published>2019-09-28T12:51:00.000Z</published>
    <updated>2019-09-28T14:41:02.041Z</updated>
    
    <content type="html"><![CDATA[<p>学习使用IDA Pro 和 x64dbg反编译一个C语言程序.</p><a id="more"></a><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol start="0"><li>DevC++</li><li>IDA Pro</li><li>x64dbg</li></ol><h2 id="开始动手！"><a href="#开始动手！" class="headerlink" title="开始动手！"></a>开始动手！</h2><p>我直接做成了视频. 直接来看吧.<br><a href="https://www.bilibili.com/video/av69174106" target="_blank" rel="noopener">【逆向工程】IDA Pro + x64dgb反编译一个应用程序</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习使用IDA Pro 和 x64dbg反编译一个C语言程序.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://l-helianthus.github.io/categories/CTF/"/>
    
    
      <category term="reverse" scheme="http://l-helianthus.github.io/tags/reverse/"/>
    
  </entry>
  
</feed>
